<apex:page standardController="Im_Incident__c" extensions="IncidentManagement" id="wholePage">
	<apex:stylesheet value="{!URLFOR($Resource.mentoresd,'/mentoresdcss2.css')}" />
	<apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'DataTables-1.10.9/css/jquery.dataTables.min.css')}" />
	<apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'jquery-ui-1.11.4.custom/jquery-ui.min.css')}" />
	<apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'Select-1.0.1/css/select.dataTables.min.css')}" />
	<apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'jQuery-2.1.4/jquery-2.1.4.min.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'DataTables-1.10.9/js/jquery.dataTables.min.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'jquery-ui-1.11.4.custom/jquery-ui.min.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'Select-1.0.1/js/dataTables.select.min.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.select2js, 'select2-4.0.1/dist/js/select2.min.js')}" />
	<apex:stylesheet value="{!URLFOR($Resource.select2js, 'select2-4.0.1/dist/css/select2.min.css')}" />

	<apex:stylesheet value="{!URLFOR($Resource.fancytree, 'skin-win7/ui.fancytree.min.css')}" />
	<apex:includescript value="{!URLFOR($Resource.fancytree, 'jquery.fancytree.min.js')}" />
	<apex:includescript value="{!URLFOR($Resource.fancytree, 'src/jquery.fancytree.filter.js')}" />
	<apex:stylesheet value="{!URLFOR($Resource.Annotorious, 'css/annotorious.css')}" />
	<apex:includeScript value="{!URLFOR($Resource.AnnotoriousOrignal, 'annotorious.min.js')}" />

	<apex:includeScript value="{!URLFOR($Resource.CommonJS)}" />
	<apex:includeScript value="{!URLFOR($Resource.IncidentJS)}" />

	<apex:remoteObjects >
		<apex:remoteObjectModel name="Transaction_Queue__c" fields="Id,Input_Params__c,Request_Type__c,Requested_Date_Time__c,Return_Value__c" jsShorthand="txnQ" />
	</apex:remoteObjects>

	<style>
		.select2-result-item {
			padding-top: 1px;
			padding-bottom: 1px;
		}
		.select2-result-item__avatar {
			float: left;
			width: 60px;
			margin-right: 5px;
		}
		.select2-result-item__avatar img {
			width: 100%;
			height: auto;
			border-radius: 1px;
		}
		.select2-result-item__meta {
			margin-left: 60px;
			}
		.select2-result-item__title {
			color: black;
			font-weight: bold;
			word-wrap: break-word;
			line-height: 1.1;
			margin-bottom: 2px;
		}
		.select2-result-item__forks {
			margin-right: 1em;
			display: inline-block;
			color: #aaa;
			font-size: 11px;
		}
		.select2-result-item__description {
			font-size: 13px;
			color: #777;
			margin-top: 4px;
		}
		.select2-results__option--highlighted .select2-result-item__title {
			color: white;
		}
		.select2-results__option--highlighted .select2-result-item__forks,
		.select2-results__option--highlighted,
		.select2-results__option--highlighted .select2-result-item__description,
		.select2-results__option--highlighted {
			color: #c6dcef;
		}
		.clearfix:before, .clearfix:after {
			content: " ";
			display: table;
		}
		.clearfix:after {
			clear: both;
		}
		.select2-results__option {
			margin-left: 0 !important;
		}

		#reportEventErrors, .error {
			color: red;
			font-weight: bold;
			border: none;
		}
		.txtarea {
			width: 90%;
		}
		.thinking {
			opacity: 0.8;
			background-color: #ccc;
			position: fixed;
			width: 100%;
			height: 100%;
			top: 0px;
			left: 0px;
			z-index: 100000;
		}
		.thinkingwheel {
			position: absolute;
			left: 40%;
			top: 48%;
			background-color: white;
			border: 2px solid gray;
			padding: 2px;
		}
		.dataTables_wrapper {
			position: relative;
			clear: none;
			zoom: 1;
		}
		td.details-control {
			background:	url("{!URLFOR($Resource.DetailsOpenClose, 'details_open.png')}") no-repeat center center;
			cursor: pointer;
		}
		tr.shown td.details-control {
			background: url("{!URLFOR($Resource.DetailsOpenClose, 'details_close.png')}") no-repeat center center;
		}
		.fancytree-container {
			border: none !important;
		}
		#involvedPartiesTable .btn {
			font-size: 8pt !important;
		}
		tr.border_bottom td {
			border-bottom: 1pt solid #F0F0EF;
		}

		.placeHolderDiv table td.dataCol{
			vertical-align: middle !important;
		}

		td.text_right {
			text-align: right;
			float: right;
			vertical-align:middle !important;
		}

		#main-section .pbTitle h2.mainTitle {
			font-size: 1.5em;
			font-weight: bold;
			padding: 5px;
		}
		.placeHolderDiv {
			width: 100% !important;
		}
		.involvedPartyInfo {
			width: 15% !important;
			border-collapse: collapse; border-spacing: 0;
		}
		.subCatTable{
			border-collapse: collapse; border-spacing: 0;
		}
		.subCatTable tr{
			background-color: #f8f8f8 !important;
		}
		.removeInvPrtyEvntTyp {
			float : right;
			top:-50px !important;
			<apex:outputPanel layout="none" rendered="{!isEditMode}">
			display: none;
			</apex:outputPanel>
		}
		.ui-state-success {
			background: #7bc145;
			color: white;
		}
	</style>
	<apex:pageMessages id="pageMessages"></apex:pageMessages>
	<div id="reportEventErrors" class="ui-state-error-text"></div>
	<apex:form id="wholeForm">
		<apex:actionFunction name="save" action="{!save}" />
		<apex:actionFunction name="closeEvent" action="{!close}" />
		<apex:actionFunction name="qualifyEvent" action="{!qualifyEvent}" />
		<apex:actionFunction name="readyForReview" action="{!readyForReview}" />
		<apex:actionFunction name="reloadCalculatedLevel" action="{!reloadCalculatedLevel}" status="pageStatus" rerender="{!$Component.detailBlock.incidentView}, pageMessages" />

		<apex:pageBlock title="{!name}" id="detailBlock">
			<apex:pageBlockButtons location="top">
				<div style="float: right" id="pageBlockButtons">
					<apex:outputPanel layout="none" rendered="{!isEditMode}">
						<a class="btn" onclick="save(); return false;">Save</a>
						<a class="btn" href="{!IF(Im_Incident__c.Id != null, '/apex/IncidentManagement?id=' + Im_Incident__c.Id, '/apex/Home')}">Cancel</a>
					</apex:outputPanel>
					<apex:outputPanel layout="none" rendered="{!isViewMode}">
						<a class="btn" onclick="window.open('/apex/Im_EventSummary?Id=' + '{!Im_Incident__c.id}' , 'EventSummary'); return false;">Summary PDF</a>
					</apex:outputPanel>
					<apex:outputPanel layout="none" rendered="{!isViewMode && !isLocked}">
						<a class="btn" href="/apex/IncidentManagement?id={!Im_Incident__c.Id}&mode=edit">Edit</a>
						<apex:outputPanel layout="none" rendered="{!isQualifyingStage}">
							<a class="btn" onclick="markEventReady(); return false;">Qualify Event as Incident</a>
						</apex:outputPanel>
						<apex:outputPanel layout="none" rendered="{!isQualifyingStage}">
							<a class="btn" onclick="closeEvent(); return false;">Close Event</a>
						</apex:outputPanel>
					</apex:outputPanel>
					<apex:outputPanel layout="none" rendered="{!isViewMode && (Im_Incident__c.Status__c = 'Incident-Draft' || Im_Incident__c.Status__c = 'Incident-Ready for Review') && Im_Incident__c.OwnerId == $User.Id}">
						<a class="btn" onclick="markIncidentReady(); return false;">Ready for Review</a>
					</apex:outputPanel>
					<apex:outputPanel layout="none" rendered="{!isViewMode && Im_Incident__c.Status__c = 'Incident-Ready for Review' && Im_Incident__c.Incident_Reviewer__r.Salesforce_User_Account__c = $User.Id}">
						<a class="btn" onclick="authenticate(); return false;">Finalize</a>
					</apex:outputPanel>
				</div>
			</apex:pageBlockButtons>
			<apex:pageBlockSection columns="2" rendered="{!isEditMode}">
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.ReportedEvent__c != null}">
					<apex:outputLabel value="Original Reported Event" />
					<apex:outputLink value="/{!Im_Incident__c.ReportedEvent__c}">{!Im_Incident__c.ReportedEvent__r.Name}</apex:outputLink>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.ReportedEvent__c != null}" />
				<apex:outputField value="{!Im_Incident__c.Reported_By__c}" />
				<apex:outputField value="{!Im_Incident__c.Date_Documented__c}" />
				<apex:outputField value="{!Im_Incident__c.Supervisor__c}" rendered="{!Im_Incident__c.Supervisor__c != null}" />
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.Supervisor__c == null}">
					<apex:outputLabel value="Supervisor" />
					<apex:outputText value="No direct supervisor found" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="programAssociatedToEvent">Program Associated to Event</label>
					<apex:outputPanel layout="none">
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<apex:selectList multiselect="false" size="1" html-placeholder="select one" value="{!Im_Incident__c.Service_Location__c}" id="programAssociatedToEvent">
								<apex:selectOptions value="{!serviceLocations}" />
							</apex:selectList>
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem >
					<label for="whatHappened">What Happened?</label>
					<apex:outputPanel layout="none">
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<apex:inputTextarea id="whatHappened" rows="3" value="{!Im_Incident__c.What_Happened__c}" style="width: 90%;" html-placeholder="Please provide brief summary only." />
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:inputField value="{!Im_Incident__c.Where_did_it_happen__c}" />
				<apex:pageBlockSectionItem >
					<label for="WhenDidItHappen_pickerId">When did it happen?</label>
					<apex:outputPanel layout="none">
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<c:UserPreferredTimePicker edit="true" hiddenFieldId="WhenDidItHappen" dateTimeVal="{!Im_Incident__c.When_did_it_happen__c}" datetimepickerid="WhenDidItHappen_pickerId" />
							<apex:inputHidden value="{!Im_Incident__c.When_did_it_happen__c}" id="WhenDidItHappen" />
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="WhenWasTheSupervisorNotified_pickerId">When was the Supervisor notified?</label>
					<apex:outputPanel layout="none">
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<c:UserPreferredTimePicker edit="true" hiddenFieldId="WhenWasTheSupervisorNotified" dateTimeVal="{!Im_Incident__c.When_was_the_Supervisor_notified__c}" datetimepickerid="WhenWasTheSupervisorNotified_pickerId" />
							<apex:inputHidden value="{!Im_Incident__c.When_was_the_Supervisor_notified__c}" id="WhenWasTheSupervisorNotified" />
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="whoElseOnStaffWasNotified">Who else on staff was notified?</label>
					<apex:outputPanel layout="none">
						<select data-placeholder="Search Staff" style="width: 80%;" data-allow-clear="true" multiple="multiple" class="tmnAccessEnhancedSelect select2UpdateHiddenFld" data-hidden-field="whoElseOnStaffWasNotified">
							<apex:repeat value="{!notifiedStaffs}" var="s">
								<option value="{!s}" selected="selected">{!notifiedStaffs[s]}</option>
							</apex:repeat>
						</select>
						<apex:inputHidden value="{!Im_Incident__c.Notified_Staff__c}" id="whoElseOnStaffWasNotified" />
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="whichAgenciesWereNotified">What external parties were notified?</label>
					<apex:outputPanel layout="none">
						<apex:outputPanel layout="none">
							<select data-placeholder="Select Agencies" style="width: 70%;" data-allow-clear="true" multiple="multiple" value="{!Im_Incident__c.Agencies_notified__c}" class="agenciesEnhancedSelect select2UpdateHiddenFld" data-hidden-field="whichAgenciesWereNotified">
								<apex:outputText value="{!agenciesNotifiedOptions}" escape="false" />
							</select>
							<apex:inputHidden value="{!Im_Incident__c.Agencies_notified__c}" id="whichAgenciesWereNotified" />
						</apex:outputPanel>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			<apex:pageBlockSection columns="2" rendered="{!isEditMode && isIncidentStage}">
				<apex:pageBlockSectionItem>
					<label for="incidentReviewer">Incident Reviewer</label>
					<apex:outputPanel layout="none">
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<select style="width: 80%;" data-allow-clear="false" class="incidentReviewerEnhancedSelect select2UpdateHiddenFld" data-hidden-field="incidentReviewer">
								<option value="{!Im_Incident__c.Incident_Reviewer__c}" selected="selected">{!Im_Incident__c.Incident_Reviewer__r.Name}</option>
							</select>
						</div>
						<apex:inputHidden value="{!Im_Incident__c.Incident_Reviewer__c}" id="incidentReviewer" />
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem />
				<apex:pageBlockSectionItem helpText="{!Im_Incident__c.Calculated_Level_Explanation__c}">
					<apex:outputLabel value="Calculated Level" />
					<apex:outputText value="{!Im_Incident__c.Calculated_Level__c}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem />
				<apex:inputField value="{!Im_Incident__c.Final_Level__c}" />
				<apex:pageBlockSectionItem />
				<apex:inputField value="{!Im_Incident__c.Final_Level_Reason__c}" style="width: 100%;" />
			</apex:pageBlockSection>
			<apex:pageBlockSection columns="2" rendered="{!isViewMode}">
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.ReportedEvent__c != null}">
					<apex:outputLabel value="Original Reported Event" />
					<apex:outputLink value="/{!Im_Incident__c.ReportedEvent__c}">{!Im_Incident__c.ReportedEvent__r.Name}</apex:outputLink>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.ReportedEvent__c != null}" />
				<apex:outputField value="{!Im_Incident__c.Reported_By__c}" />
				<apex:outputField value="{!Im_Incident__c.Date_Documented__c}" />
				<apex:outputField value="{!Im_Incident__c.Supervisor__c}" rendered="{!Im_Incident__c.Supervisor__c != null}" />
				<apex:pageBlockSectionItem rendered="{!Im_Incident__c.Supervisor__c == null}">
					<apex:outputLabel value="Supervisor" />
					<apex:outputText value="No direct supervisor found" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel >Program Associated to Event</apex:outputLabel>
					<apex:outputPanel layout="none">
						{!Im_Incident__c.Service_Location__r.Alias__c + '-' + Im_Incident__c.Service_Location__r.Program__c}
						<apex:inputHidden value="{!Im_Incident__c.Service_Location__c}" id="hiddenprogramAssociatedToEvent" />
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:outputField value="{!Im_Incident__c.What_Happened__c}" />
				<apex:outputField value="{!Im_Incident__c.Where_did_it_happen__c}" />
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="When did it happen?" />
					<c:UserPreferredTimePicker dateTimeVal="{!Im_Incident__c.When_did_it_happen__c}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="When was the Supervisor notified?" />
					<c:UserPreferredTimePicker dateTimeVal="{!Im_Incident__c.When_was_the_Supervisor_notified__c}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Who else on staff was notified?" />
					<apex:outputText value="{!notifiedStaffNames}" />
				</apex:pageBlockSectionItem>
				<apex:outputField value="{!Im_Incident__c.Agencies_notified__c}" label="What external parties were notified?" />
			</apex:pageBlockSection>
			<apex:pageBlockSection columns="1" rendered="{!isViewMode && isIncidentStage}" id="incidentView">
				<apex:outputField value="{!Im_Incident__c.Incident_Reviewer__c}" />
				<apex:pageBlockSectionItem helpText="{!Im_Incident__c.Calculated_Level_Explanation__c}">
					<apex:outputLabel value="Calculated Level" />
					<apex:outputText value="{!Im_Incident__c.Calculated_Level__c}" />
				</apex:pageBlockSectionItem>
				<apex:outputField value="{!Im_Incident__c.Final_Level__c}" />
				<apex:outputField value="{!Im_Incident__c.Final_Level_Reason__c}" />
				<apex:outputField value="{!Im_Incident__c.eSigned_By__c}" rendered="{!Im_Incident__c.Status__c = 'Incident-Finalized'}" />
				<apex:outputField value="{!Im_Incident__c.eSigned_Time__c}" rendered="{!Im_Incident__c.Status__c = 'Incident-Finalized'}" />
			</apex:pageBlockSection>
			<apex:pageBlockSection columns="1" collapsible="false" rendered="{!isViewMode}">
				<apex:outputPanel layout="block" id="involvedPartyBlock" >
					<apex:outputPanel layout="block" id="involvedPartyBlock2">
						<span style="float: right;padding-right: 1em;">
							<apex:outputPanel layout="none" rendered="{!!isLocked}">
								<a class="btn" id="addRow">Add Involved Party</a>
							</apex:outputPanel>
						</span>
						<div id="collapseDiv" style="padding: 2em 2em 1em 2em;">
							<table id="involvedPartiesTable" class="" style="border-spacing: 0; width:100%">
								<thead>
									<tr>
										<th style="width: 1em;"></th> <!-- show-detail image -->
										<th></th> <!-- involved Party Id-->
										<th style="width: 15%;">Who was involved?</th> <!-- Party Type -->
										<th style="text-align: left;">Name</th> <!-- Party Name -->
										<th style="text-align: Right;padding-right: 2em;">Actions</th> <!-- Add Event, delete this involved party-->
									</tr>
								</thead>
								<tbody></tbody>
							</table>
						</div>
					</apex:outputPanel>
			</apex:outputPanel>
			</apex:pageBlockSection>
		</apex:pageBlock>
		<c:Authentication formId="{!$Component.wholeForm}" title="E-Sign" handler="IncidentManagement"
			objectId="{!Im_Incident__c.Id}" loadLibraries="false"
			oncomplete="alert('This document was electronically signed by {!$User.FirstName} ({!$User.Email}) on {!NOW()}');"
		/>
	</apex:form>
	<apex:actionStatus id="pageStatus" layout="block" onstart="jQuery('#pageBlockButtons').toggle();">
		<apex:facet name="start">
			<div class="thinking">
				<div class="thinkingwheel">
					<span><img class="waitingImage" src="/img/loading.gif" title="Please Wait..." />&nbsp; Processing...</span>
				</div>
			</div>
		</apex:facet>
		<apex:facet name="stop"></apex:facet>
	</apex:actionStatus>

	<div id="Add-Involved-Party" title="Add Involved Party" >
		<div style="color:red; font-weight: bold;" id="Add-Involved-Party-Error"></div>
		<apex:pageBlock >
			<apex:pageBlockSection columns="1">
				<apex:pageBlockSectionItem >
					<label for="involved-PartyType" style="white-space: nowrap;">Who was involved?</label>
					<apex:outputPanel >
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<select name="Type__c" id="involved-PartyType" data-placeholder="Please select" style="width: 80%;" class="simpleSelect2"
									data-visibility-row-rules="true" data-visibility-rules="{&quot;Person Being Served&quot;:[&quot;involved-Party-PBS&quot;],&quot;Staff&quot;:[&quot;involved-Party-Staff&quot;],&quot;Host Home Parent&quot;:[&quot;involved-Party-NameOfIndividual&quot;],&quot;Other Family Member&quot;:[&quot;involved-Party-NameOfIndividual&quot;],&quot;Other&quot;:[&quot;involved-Party-NameOfIndividual&quot;]}" >
								<option></option>
								<option value="Person Being Served">Person Being Served</option>
								<option value="Staff">Staff</option>
								<option value="Host Home Parent">Host Home Parent</option>
								<option value="Other Family Member">Other Family Member</option>
								<option value="Other">Other</option>
							</select>
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="involved-Party-PBS" style="white-space: nowrap;">Person Being Served</label>
					<apex:outputPanel >
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<select name="Person_Being_Served_Involved__c" id="involved-Party-PBS" data-placeholder="Search PBS" style="width: 80%;" data-allow-clear="true" class="pbsEnhancedSelect" >
								<option></option>
							</select>
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="involved-Party-Staff" style="white-space: nowrap;">Staff</label>
					<apex:outputPanel >
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<select name="Staff_Involved__c" id="involved-Party-Staff" data-placeholder="Search Staff" style="width: 80%;" data-allow-clear="true" class="tmnAccessEnhancedSelect">
								<option></option>
							</select>
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem >
					<label for="involved-Party-NameOfIndividual" style="white-space: nowrap;">Name of Individual</label>
					<apex:outputPanel >
						<div class="requiredInput">
							<div class="requiredBlock"></div>
							<input name="Name" type="text" id="involved-Party-NameOfIndividual" style="width: 80%;" />
						</div>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<input type="hidden" value="{!IM_Incident__c.Id}" name="Im_Incident__c"/>
			</apex:pageBlockSection>
		</apex:pageBlock>
	</div>

	<div id="Del-Involved-Party" title="Remove Involved Party">
		<div style="color:red; font-weight: bold;" id="Del-Involved-Party-Error"></div>
		<apex:pageBlock >
			<apex:outputPanel layout="block" style="font-size: 12px; font-weight: bold; color: #4A4A56; " >
				<center></center>
			</apex:outputPanel>
		</apex:pageBlock>
	</div>

	<div id="dialogForEventsTree" title="Add event types to the individual involved in this Event." >
		<div style="color:red; font-weight: bold;" id="dialogForEventsTree-Error"></div>
		<apex:pageBlock >
			<p style="padding-bottom: 1em;">
				<label>Filter:</label>
				<input name="search" placeholder="Filter..." autocomplete="off" />
				<button id="btnResetSearch">&times;</button>
				<span id="matches"></span>
			</p>
			<div id="eventTypesFancyTree" style="width:100%" ></div>
		</apex:pageBlock>
	</div>

	<apex:outputPanel id="dialog-confirm-navigation" title="Pending Changes - Action cannot be performed" layout="block">
		<apex:outputPanel layout="inline">
			<apex:outputPanel layout="inline" styleClass="ui-icon ui-icon-alert" style="float:left; margin:0 7px 10px 0;" />
			<center>Following Involved Parties has changes that are not saved to database yet. Please save before performing this action.</center>
			<ul id="involvedPartiesWithPendingChanges">
			</ul>
		</apex:outputPanel>
	</apex:outputPanel>

	<script>
	function setFocusOnLoad() {}
	jQuery.noConflict();
	jQuery(document).ready(function ($) {
		"use strict";
		window.isIncidentLocked = {!isLocked};
		window.isReadOnlyMode = isIncidentLocked || {!isEditMode};

		var dialogForEventsTree = $('#dialogForEventsTree').dialog({
			customOption: {},
			width: 500,
			autoOpen: false,
			modal: true,
			title: "",
			resizable: false,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			height: 600,
			open: function(event, ui) {
				$('[Id="{!$Component.pageStatus}.start"]').toggle();
				var data = dialogForEventsTree.dialog('option', 'customOption.rowData');
				dialogForEventsTree.dialog("option", "title", "Add event types for " + data.type + " - " + data.name);
				IncidentManagement.getInvolvedPartyEventTypes(
					JSON.stringify({
						involvedParty: data.id,
						involvedPartyType: data.type
					}
				), function(result, event) {
					if (!event.status) {
						$('#dialogForEventsTree-Error').html(event.message);
						$('#dialogForEventsTree').scrollTop("0");
						$('[Id="{!$Component.pageStatus}.start"]').toggle();
					} else {
						$('#dialogForEventsTree-Error').html('');
						var mytreeData = JSON.parse($('<div/>').html(result).text());
						$("button#btnResetSearch").trigger('click');
						$('#eventTypesFancyTree').fancytree("getTree").reload(mytreeData);
						$('[Id="{!$Component.pageStatus}.start"]').toggle();
					}
				});
			},
			buttons: {
				"Add Events": function() {
					var selCategories = $.map($('#eventTypesFancyTree').fancytree("getTree").getSelectedNodes(), function(node) {
						return node.key;
					});
					if (selCategories.length < 1) {
						$('#dialogForEventsTree-Error').html('No event types selected.');
						$('#dialogForEventsTree').scrollTop("0");
						return false;
					}
					var data = dialogForEventsTree.dialog('option', 'customOption.rowData');
					var txn = new SObjectModel.txnQ({
						Request_Type__c: 'Insert-InvolvedPartyEvtTyps',
						Input_Params__c: JSON.stringify({
							involvedParty: data.id,
							eventsAdded: selCategories
						}),
						Requested_Date_Time__c: new Date(new Date().valueOf() + new Date().getTimezoneOffset() * 60000)
					});
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
					txn.upsert(function(err, ids) {
						if (err) {
							console.log(err);
							$('#dialogForEventsTree-Error').html(err.message.slice(err.message.lastIndexOf('CustomException:') + ('CustomException:').length, err.message.lastIndexOf('Class.')));
							$('#dialogForEventsTree').scrollTop("0");
							$('[Id="{!$Component.pageStatus}.start"]').toggle();
						} else {
							$('#dialogForEventsTree-Error').html('');
							$('[Id="{!$Component.pageStatus}.start"]').toggle();
							$('#' + data.id + 'eventLoader').trigger('change'); // tell the data table to reload the events.
							dialogForEventsTree.dialog("close");
						}
					});
				},
				Cancel: function() {
					$('#dialogForEventsTree-Error').html('');
					$(this).dialog("close");
				}
			}
		});

		window.reloadEventsForIP = function(involvedParty) {
			$('[Id="{!$Component.pageStatus}.start"]').toggle();
			IncidentManagement.getEventDetails(involvedParty, isIncidentLocked, function(result, event) {
				if (!event.status) {
					$('#reportEventErrors').append('<li class="error">' + event.message + '</li>');
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
				} else {
					$('#' + involvedParty + 'placeHolderDiv').empty().append(result).accordion({
						collapsible: true,
						heightStyle: "content",
						header: "h3",
						active: false,
						animate: false
					});
					$('#' + involvedParty + 'placeHolderDiv').accordion("refresh");
					var api = $('#involvedPartiesTable').dataTable().api();
					var row = api.row('#' + involvedParty);
					row.data().eventsTypesLoaded = true;
					row.select();
					$(row.node()).find("a.saveInvprty").show()
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
				}
			}, {
				escape: false
			});
		};
		var saveInvolvedParty = function(involvedParty) {
			$('#involvedPartiesWithPendingChanges').empty();
			Incident.buildInvolvedPartyEventErrors('#' + involvedParty.id + 'placeHolderDiv');
			var myData = JSON.stringify($('#involvedPartiesTable').dataTable().api().row('#' + involvedParty.id).child().find(":input").serializeArray());
			$('[Id="{!$Component.pageStatus}.start"]').toggle();
			IncidentManagement.saveFields(involvedParty.id, myData, function(result, event) {
				if (!event.status) {
					$('#reportEventErrors').append('<li class="error">' + event.message + '</li>');
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
				} else {
					$('#' + involvedParty.id + 'placeHolderDiv').empty().append(result).accordion({
						collapsible: true,
						heightStyle: "content",
						header: "h3",
						active: false,
						animate: false
					});
					$('#' + involvedParty.id + 'placeHolderDiv').accordion("refresh");
					var api = $('#involvedPartiesTable').dataTable().api();
					api.row('#' + involvedParty.id).data().eventsTypesLoaded = true;
					api.row('#' + involvedParty.id).data().isModified = false;
					api.row('#' + involvedParty.id).select();
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
					$.alert('Your data for ' + involvedParty.type + ' - ' + involvedParty.name + ' has been saved successfully.', 'Successfully Saved!!!', function () {
						<apex:outputPanel layout="none" rendered="{!isIncidentStage}">
						reloadCalculatedLevel();
						</apex:outputPanel>
					});
				}
			}, {
				escape: false
			});
		};

		window.initializeInvolvedParties = function () {
			var table = $('#involvedPartiesTable').DataTable({
				select: {
					style: 'api'
				},
				"paging": false,
				"ordering": false,
				"info": false,
				"searching": false,
				"orderFixed": [2, 'desc'],
				"processing": true,
				"ajax": function(data, callback, settings) {
					// vf remote to retrieve table data
					IncidentManagement.getInvolvedParties('{!IM_Incident__c}', function(result, event) {
						if (!event.status) {
							$('#reportEventErrors').append('<li class="error">' + event.message + '</li>');
							$('#reportEventErrors').show();
						} else {
							callback({ data: result });
						}
					}, {
						escape: false
					});
				},
				"columns": [{
					"class": "details-control",
					"orderable": false,
					"data": null,
					"defaultContent": ""
				}, {
					"data": "id"
				}, {
					"data": "type"
				}, {
					"data": "name"
				}, {
					"orderable": false,
					"data": null
				}],
				"columnDefs": [{
					"visible": false,
					"targets": 1
				}, {
					"targets": 4,
					"render": function(data, type, full, meta) {
						var actionStr = '<span style="float: right;"><a class="btn tableActionBtn pdfSummary" href="javascript:void(0);">PDF</a>&nbsp;&nbsp;';
						if (!isReadOnlyMode) {
							actionStr += '<a class="btn tableActionBtn deleteRow" href="javascript:void(0);">Remove</a>&nbsp;&nbsp;<a class="btn tableActionBtn addEvent" href="javascript:void(0);">Add Events</a>&nbsp;&nbsp;<a class="btn tableActionBtn saveInvprty" href="javascript:void(0);" style="display:none;">Save</a>';
						}
						actionStr += '</span>';
						return actionStr;
					}
				}],
				"drawCallback": function(settings) {
					var api = this.api();
					api.rows().every(function(rowIdx, tableLoop, rowLoop) {
						var data = this.data();
						data.eventsTypesLoaded = false;
						data.elementsModified = [];
						if (this.child.isShown()) {
							this.child.hide();
							$(this.node()).removeClass('shown');
							$('#involvedPartiesTable').dataTable().api().row(this).deselect();
						}
					});
				},
				"rowCallback": function(row, data, index) {
					var rowAPI = $('#involvedPartiesTable').dataTable().api().row(index);
					var detailData = '<tr>';
					if (data.type == "Person Being Served") {
						detailData += '<td class="involvedPartyInfo"><table>' +
							'<tr><td class="text_right" style="font-weight: bold;">Person Number' + '</td><td> #' + data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_Being_Served__r.PBS_Identifier__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Gender</td><td>' + data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_Being_Served__r.Gender__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Date of Birth</td><td>' + (new Date(data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_Being_Served__r.Birthdate)).toLocaleDateString() + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Age</td><td>' + data.involvedParty.PBS_Age__c + ' yr  </td></tr>';
						if (data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_being_served__r && data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_being_served__r.Guardian1_Name__c) {
							detailData += '<tr><td class="text_right" style="font-weight: bold;">Guardian Name</td><td>' + data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Person_being_served__r.Guardian1_Name__c + '</td></tr>';
						} else {
							detailData += '<tr><td class="text_right" style="font-weight: bold;">Guardian Name</td><td> Not Available </td></tr>';
						}
						detailData += '<tr><td class="text_right" style="font-weight: bold;">Population</td><td>' + data.involvedParty.PBS_Population_Type__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Admission Date</td><td>' + (new Date(data.involvedParty.Person_Being_Served_Involved__r.Admission__r.Effective_Date__c)).toLocaleDateString() + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Service Assignment Start Date</td><td>' + (new Date(data.involvedParty.Person_Being_Served_Involved__r.Start_Date__c)).toLocaleDateString() + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Length of Service</td><td>' + data.involvedParty.Length_Of_Service__c + '</td></tr></table>' +
							'</td>';
					} else if (data.type == "Staff") {
						detailData += '<td class="involvedPartyInfo"><table>' +
							'<tr><td class="text_right" style="font-weight: bold;">Employee' + '</td><td> #' + data.involvedParty.Staff_Involved__r.Employee_Number__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Job Title</td><td>' + data.involvedParty.Staff_Involved__r.Job_Title__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Job Status</td><td>' + data.involvedParty.Staff_Involved__r.Job_Status__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Type</td><td>' + data.involvedParty.Staff_Involved__r.Current_Person_Type__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Manager Name</td><td>' + data.involvedParty.Staff_Involved__r.Manager_Name__c + '</td></tr>' +
							'<tr><td class="text_right" style="font-weight: bold;">Primary Work Location </td><td>' + data.involvedParty.Staff_Involved__r.Location_Name__c + '</td></tr></table>' +
							'</td>';
					} else if (data.type == "Host Home Parent") {
						detailData += '<td class="involvedPartyInfo"></td>';
					} else if (data.type == "Other Family Member") {
						detailData += '<td class="involvedPartyInfo"></td>';
					} else if (data.type == "Other") {
						detailData += '<td class="involvedPartyInfo"></td>';
					}
					detailData += '<td><input type="hidden" id="' + data.id + 'eventLoader" value="0" onchange="reloadEventsForIP(\'' + data.id + '\');return false;"/><div id="' + data.id + 'placeHolderDiv" class="placeHolderDiv"/></td>';
					detailData += '</tr>';
					rowAPI.child($('<table style="width: 100%;"/>').append(detailData));
				}
			});
			$('#involvedPartiesTable tbody').on('click', 'td.details-control', function() {
				var tr = $(this).closest('tr');
				var row = table.row(tr);
				var rowData = row.data();

				if (row.child.isShown()) {
					row.child.hide();
					tr.removeClass('shown');
					table.row(tr).deselect();
				} else {
					row.child.show();
					tr.addClass('shown');
					table.row(tr).select();
					if (!rowData.eventsTypesLoaded) {
						reloadEventsForIP(rowData.id);
					}
				}
			});
			$('#involvedPartiesTable tbody').on('click', 'a.tableActionBtn', function() {
				var tr = $(this).closest('tr');
				var row = table.row(tr);
				var rowData = row.data();
				switch ($(this).prop('class').split(' ').slice(-1)[0]) {
					case 'deleteRow':
						if (alertPendingChanges()) {
							break;
						}
						deleteInvolvedPartyDialog.dialog('option', 'customOption.rowData', rowData);
						deleteInvolvedPartyDialog.dialog('open');
						break;
					case 'addEvent':
						if (!row.child.isShown()) {
							row.child.show();
							tr.addClass('shown');
							table.row(tr).select();
							if (!rowData.eventsTypesLoaded) reloadEventsForIP(rowData.id);
						}
						if (alertPendingChanges(rowData.id)) {
							break;
						}
						dialogForEventsTree.dialog('option', 'customOption.rowData', rowData);
						dialogForEventsTree.dialog('open');
						break;
					case 'saveInvprty':
						if (!row.child.isShown()) {
							$(row.node()).css('color', 'black').animate({
								color: 'red'
							}, 'slow');
							$.alert('You must expand the details before save.', '*** Cannot Save ***');
							break;
						}
						saveInvolvedParty(rowData);
						break;
					case 'pdfSummary':
						window.open('/apex/Im_EventSummary?Id=' + '{!Im_Incident__c.id}' + '&invParty=' + rowData.id, 'EventSummary');
						break;
					default:
						alert('Not impelemted yet!!');
				}
			});
		};

		window.setUpFields = function(targets) {
			if (!targets) targets = $('#Add-Involved-Party input, #Add-Involved-Party select, #Add-Involved-Party textarea');
			$(targets).filter('.annotableImage').each(function(_, target) {
				initAnnotation(target);
			});
			$(targets).on("change", function(event) {
				applyRulesToField(event.target);
				applyShowHideRulesToField(event.target);
			});
			$(targets).each(function(_, target) {
				applyRulesToField(target);
				applyShowHideRulesToField(target);
			});

			$(targets).filter('.datepicker').datetimepicker({
				timepicker: false,
				format: 'm/d/Y',
				closeOnDateSelect: true
			});
			$(targets).filter('.datetimepicker').datetimepicker({
				<apex:outputPanel layout="none" rendered="{!$Setup.UserDefaults__c.MilitaryTime__c}">
					format: 'm/d/Y H:i',
				</apex:outputPanel>
				<apex:outputPanel layout="none" rendered="{!!$Setup.UserDefaults__c.MilitaryTime__c}">
					formatTime: 'g:i A',
					format: 'm/d/Y h:i A',
				</apex:outputPanel>
					allowBlank: true
			});

			$(targets).filter('[data-composite]').on("change", function(event) {
				$('#involvedPartiesTable').dataTable().api().row('#' + $(event.target).data('composite')).data().isModified = true;
			});

			$(targets).filter('.removeInvPrtyEvntTyp').one("click", function(event) {
				removeInvolvedPartyEventType($(this));
			});
		};

		var removeInvolvedPartyEventType = function($target) {
			if (!$target) {
				return false;
			}
			var sectionIdentifier = $target.closest('.subCatTable').prop('class').split(' ').slice(1)[0];
			var invParty =  $target.closest('.placeHolderDiv').prop('id').split('placeHolderDiv')[0];
			var ImInvolvedParty = new SObjectModel.txnQ({
				Request_Type__c: 'Delete-InvPrtyEvntTyp',
				Input_Params__c: JSON.stringify({
					'sectionIdentifier' : sectionIdentifier.substring(8),
					'invParty' : invParty
				}),
				Requested_Date_Time__c: new Date(new Date().valueOf() + new Date().getTimezoneOffset() * 60000)
			});
			ImInvolvedParty.upsert(function(err, ids) {
				if (err) {
					console.log(err);
					$('#reportEventErrors').html(err.message);
					$(window).scrollTop(0);
				}
				reloadCalculatedLevel();
			});
			$('#' + sectionIdentifier + ', .' + sectionIdentifier).fadeOut('slow', function() {$(this).remove(); });
		};

		window.initializeEventTypesTree = function() {
			$('#eventTypesFancyTree').fancytree({
				extensions: ["filter"],
				filter: {
					fuzzy: false,
					autoApply: false,
					counter: true,
					hideExpandedCounter: true,
					mode: "hide"
				},
				checkbox: true,
				selectMode: 3,
				source: function() {
					return [];
				},
				icons: false
			});
			var tree = $("#eventTypesFancyTree").fancytree("getTree");
			$("input[name=search]").keyup(function(e) {
				var n;
				var opts = {
					autoExpand: true,
					leavesOnly: true
				},
				match = $(this).val();
				if (e && e.which === $.ui.keyCode.ESCAPE || $.trim(match) === "") {
					$("button#btnResetSearch").click();
					return;
				}
				n = tree.applyFilter(match, opts);
				$("button#btnResetSearch").attr("disabled", false);
				$("span#matches").text("(" + n + " matches)");
			}).focus();

			$("button#btnResetSearch").click(function(e) {
				$("input[name=search]").val("");
				$("span#matches").text("");
				tree.clearFilter();
			}).attr("disabled", true);
		}

		window.initializeSelect2 = function () {
			$(".tmnAccessEnhancedSelect").select2({
				minimumInputLength: 3,
				escapeMarkup: function(markup) {
					return markup;
				},
				templateResult: Incident.formatStaff,
				templateSelection: Incident.formatStaffSelection,
				ajax: {
					processResults: function(data) {
						return { results: data };
					},
					minimumInputLength: 3,
					cache: true,
					delay: 100,
					data: function(params) {
						return {
							q: params.term, // search term
							page: params.page,
							programLocation: $('[id$=programAssociatedToEvent]').val()
						};
					},
					transport: function(params, success, failure) {
						IncidentManagement.getStaffForProgram(JSON.stringify(params.data), function(result, event) {
							if (!event.status) {
								$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
								return false;
								failure(event.message);
							} else {
								success(result);
							}
						});
					}
				}
			});

			$(".incidentReviewerEnhancedSelect").select2({
				minimumInputLength: 3,
				escapeMarkup: function(markup) {
					return markup;
				},
				templateResult: Incident.formatStaff,
				templateSelection: Incident.formatStaffSelection,
				ajax: {
					processResults: function(data) {
						return { results: data };
					},
					minimumInputLength: 3,
					cache: true,
					delay: 100,
					data: function(params) {
						return {
							q: params.term, // search term
							page: params.page,
							programLocation: $('[id$=programAssociatedToEvent]').val()
						};
					},
					transport: function(params, success, failure) {
						IncidentManagement.getIncidentReviewers(JSON.stringify(params.data), function(result, event) {
							if (!event.status) {
								$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
								return false;
							} else {
								success(result);
							}
						});
					}
				}
			});

			$(".pbsEnhancedSelect").select2({
				minimumInputLength: 3,
				escapeMarkup: function(markup) {
					return markup;
				},
				templateResult: Incident.formatPBS,
				templateSelection: Incident.formatPBSSelection,
				ajax: {
					processResults: function(data) {
						return { results: data };
					},
					minimumInputLength: 3,
					cache: true,
					delay: 100,
					data: function(params) {
						return {
							q: params.term, // search term
							page: params.page,
							programLocation: $('[id$=programAssociatedToEvent]').val()
						};
					},
					transport: function(params, success, failure) {
						IncidentManagement.getPBSForProgram(JSON.stringify(params.data), function(result, event) {
							if (!event.status) {
								$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
								return false;
							} else {
								success(result);
							}
						});
					}
				}
			});

			$(".agenciesEnhancedSelect").select2({
				tags: true,
				tokenSeparators: [',']
			});
			$(".simpleSelect2").select2({
				minimumResultsForSearch: Infinity,
				allowClear: true
			});
			$(".select2UpdateHiddenFld").each(function(i) {
				var $target = $(this);
				if (!$target.data('hidden-field')) {
					return true;
				}
				$target.on("change", function(e) {
					$('[id$=' + $target.data('hidden-field') + ']').val($target.val());
				});
			});

			window.$confirmDialog = $("[id$='dialog-confirm-navigation']");
			$confirmDialog.dialog({
				resizable: false,
				draggable: false,
				width: 500,
				modal: true,
				autoOpen: false,
				buttons: {
					Close: function() {
						$(this).dialog("close");
					}
				}
			});
		};

		var addInvolvedPartyDialog = $('#Add-Involved-Party').dialog({
			width: 500,
			autoOpen: false,
			modal: true,
			resizable: false,
			open: function() {
				// var ui_dialog_interaction;
				if ($.ui && $.ui.dialog && !$.ui.dialog.prototype._allowInteractionRemapped && $(this).closest(".ui-dialog").length) {
					var ui_dialog_interaction = $.ui.dialog.prototype._allowInteraction;
					$.ui.dialog.prototype._allowInteraction = function(e) {
						return true;
						if ($(e.target).closest('.select2-drop').length) {
							return true;
						}
						return ui_dialog_interaction.apply(this, arguments);
					};
				}
			},
			_allowInteraction: function(event) {
				return !!$(event.target).is(".select2-input") || this._super(event);
			},
			create: function() {
				$(this).closest(".ui-dialog")
						.find(".ui-button")
						.addClass("");
			},
			close: function(event, ui) {
				$('#Add-Involved-Party-Error').html('');
				$('#involved-PartyType').val('').trigger('change');
			},
			buttons: {
				"Save": function() {
					var dataObj = $.grep($('#Add-Involved-Party :input').serializeArray(), function(k, i) {
						return k.value ? true : false;
					});
					if ($('#involved-PartyType').val() == '') {
						$('#Add-Involved-Party-Error').html('You must select "Who was involved?" to proceed.');
						return false;
					} else if (dataObj.length < 3) {
						$('#Add-Involved-Party-Error').html('Missing required input.');
						return false;
					}
					var formdata = {};
					$(dataObj).each(function(index, obj) {
						formdata[obj.name] = obj.value;
					});
					window.ImInvolvedParty = new SObjectModel.txnQ({
						Request_Type__c: 'Insert-Im_InvolvedParty',
						Input_Params__c: JSON.stringify(formdata),
						Requested_Date_Time__c: new Date(new Date().valueOf() + new Date().getTimezoneOffset() * 60000)
					});
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
					ImInvolvedParty.upsert(function(err, ids) {
						if (err) {
							console.log(err);
							$('#Add-Involved-Party-Error').html(err.message.slice(err.message.lastIndexOf('FIELD_CUSTOM_VALIDATION_EXCEPTION,') + ('FIELD_CUSTOM_VALIDATION_EXCEPTION,').length, err.message.lastIndexOf(': []')));
							$('[Id="{!$Component.pageStatus}.start"]').toggle();
						} else {
							$('#Add-Involved-Party-Error').html('');
							var ImInvolvedParty = new SObjectModel.txnQ();
							ImInvolvedParty.retrieve({
								where: {
									Id: {
										eq: ids[0]
									}
								}
							}, function(err, records) {
								if (err) {
									console.log(err);
									$('#Add-Involved-Party-Error').html(err.message);
									$('[Id="{!$Component.pageStatus}.start"]').toggle();
								} else {
									var mytreeData = JSON.parse($('<div/>').html(records[0].get("Return_Value__c")).text());
									var myTableApi = $('#involvedPartiesTable').dataTable().api();
									var rowNode = myTableApi.row.add(mytreeData).draw(false);
									myTableApi.row(rowNode).select();
									$('#involved-PartyType').val('').trigger('change');
									$('#Add-Involved-Party-Error').html('');
									addInvolvedPartyDialog.dialog("close");
									$('[Id="{!$Component.pageStatus}.start"]').toggle();
								}
							});
						}
					});
				},
				Cancel: function() {
					$('#Add-Involved-Party-Error').html('');
					$('#involved-PartyType').val('').trigger('change');
					$(this).dialog("close");
				}
			}
		});

		var deleteInvolvedPartyDialog = $('#Del-Involved-Party').dialog({
			customOption: {},
			width: 500,
			autoOpen: false,
			modal: true,
			resizable: false,
			open: function(event, ui) {
				var data = deleteInvolvedPartyDialog.dialog('option', 'customOption.rowData');
				var msg = 'You are removing the ' + data.type + ' - ' + data.name + ' from this event. This will delete all the information for this party associated to the event. Please confirm.';
				$(event.target).find('center').html(msg);
			},
			buttons: {
				"Confirm Delete": function() {
					var ImInvolvedParty = new SObjectModel.txnQ({
						Request_Type__c: 'Delete-Im_InvolvedParty',
						Input_Params__c: deleteInvolvedPartyDialog.dialog('option', 'customOption.rowData').id,
						Requested_Date_Time__c: new Date(new Date().valueOf() + new Date().getTimezoneOffset() * 60000)
					});
					$('[Id="{!$Component.pageStatus}.start"]').toggle();
					ImInvolvedParty.upsert(function(err, ids) {
						if (err) {
							console.log(err);
							$('#Del-Involved-Party-Error').html(err.message);
							$('[Id="{!$Component.pageStatus}.start"]').toggle();
						} else {
							$('#involvedPartiesTable').dataTable().api().row('#' + deleteInvolvedPartyDialog.dialog('option', 'customOption.rowData').id).remove().draw(false);
							$('#Add-Involved-Party-Error').html('');
							deleteInvolvedPartyDialog.dialog("close");
							$('[Id="{!$Component.pageStatus}.start"]').toggle();
							reloadCalculatedLevel();
						}
					});
				},
				Cancel: function() {
					$('#Del-Involved-Party-Error').html('');
					$(this).dialog("close");
				}
			}
		});

		window.alertPendingChanges = function(rowId) {
			$('#involvedPartiesWithPendingChanges').empty();
			var api = $('#involvedPartiesTable').dataTable().api();

			if (!rowId){
				api.rows().every(function(rowIdx, tableLoop, rowLoop) {
					var data = this.data();
					if (data.isModified) {
						$('#involvedPartiesWithPendingChanges').append('<li>' + data.type + ' - ' + data.name + '</li>');
						$confirmDialog.dialog("open");
					}
				});
			} else {
				var data = api.row('#' + rowId).data();
				if (data.isModified) {
					$('#involvedPartiesWithPendingChanges').append('<li>' + data.type + ' - ' + data.name + '</li>');
					$confirmDialog.dialog("open");
				}
			}
			return $('#involvedPartiesWithPendingChanges').children().length > 0 ;
		};

		window.createAnnotationElements = function(target, annotations) {
			target.parent().find('.annotation-number').remove();
			$('table#annotations' + target.attr('id').slice(7) + ' tr').remove();
			$.each(annotations, function(index, annotation) {
				var $divEl = $("<div class='annotation-number' style='pointer-events:none; position: absolute; text-align: center; left: " + annotation.shapes[0].geometry.x * 100 + "%; width: " + annotation.shapes[0].geometry.width * 100 + "%; top: " + annotation.shapes[0].geometry.y * 100 + "%; height: " + annotation.shapes[0].geometry.height * 100 + "%;'></div>");
				target.parent().append($divEl);
				var $textEl = $("<span style='line-height: " + $divEl.height() + "px; color: red; font-size: 1.5em;'>" + (index + 1) + "</span>");
				$divEl.append($textEl);
				$('table#annotations' + target.attr('id').slice(7) + ' tbody').append("<tr><td>" + (index + 1) + "</td><td>" + annotation.text + "</td></tr>");
			});
		};
		var anno = window.anno;
		anno.reset();
		window.initAnnotation = function(el) {
			var $el = $(el);
			anno.destroy($el.prop("src"));
			anno.makeAnnotatable(el);
			$($el.data('myannotations')).each(function(_, annotation) {
				anno.addAnnotation({
					editable: !isReadOnlyMode,
					Id: annotation.Id,
					src: annotation.Annotation_Source__c,
					text: annotation.Annotation_Text__c,
					shapes: [{
						type: annotation.Annotation_Shape__c,
						geometry: {
							x: annotation.Annotation_X__c,
							y: annotation.Annotation_Y__c,
							width: annotation.Annotation_Width__c,
							height: annotation.Annotation_Height__c
						}
					}]
				});
			});
			createAnnotationElements($el, anno.getAnnotations($el.prop("src")));
			if(isReadOnlyMode) anno.hideSelectionWidget($el.prop("src"));
		};

		anno.addHandler('onAnnotationCreated', function(annotation) {
			var $el = $('img[src$="'+ annotation.src.split('?')[1] +'"]');
			createAnnotationElements($el, anno.getAnnotations($el.prop("src")));
			addOrModifyAnnotation(annotation, true);
		});
		anno.addHandler('onAnnotationUpdated', function(annotation) {
			var $el = $('img[src$="'+ annotation.src.split('?')[1] +'"]');
			createAnnotationElements($el, anno.getAnnotations($el.prop("src")));
			addOrModifyAnnotation(annotation, false);
		});
		anno.addHandler('onAnnotationRemoved', function(annotation) {
			var $el = $('img[src$="'+ annotation.src.split('?')[1] +'"]');
			createAnnotationElements($el, anno.getAnnotations($el.prop("src")));
			removeAnnotation(annotation);
		});

		var validateHelper = function (onSuccess) {
			if (alertPendingChanges()) {
				return;
			}
			// call for the server side validation, and based on the success return call onSuccess
			IncidentManagement.validateEvent('{!Im_Incident__c.id}', function(result, event) {
				if (!event.status) {
					$('#reportEventErrors').html(err.message);
					$(window).scrollTop(0);
				} else {
					if (result.goodToSubmit) {
						onSuccess();
					} else {
						if (result.validationErrors.length == 1 ) {
							$('#reportEventErrors').html(result.validationErrors);
						} else {
							$('#reportEventErrors').html('Please review and correct the error below :');
							$.each(result.validationErrors, function(index, error) {
								$('#reportEventErrors').append('<li class="error">' + error + '</li>');
							});
						}
						$(window).scrollTop(0);
					}
				}
			});
		};

		// The following 2 methods are polyfills for the Authentication component, since this page
		// uses a different jQuery & jQuery UI version that Authentication is expecting.
		window.openModalDialog = function (dialogId, titleString, formId, dClass, width, hideCloseButton) {
			if (!width) {
				width = 800;
			}
			if (!dClass) {
				dClass = 'fixed-dialog';
			}
			if (hideCloseButton === undefined) {
				hideCloseButton = true;
			}
			var $element = $(document.getElementById(dialogId));
			$element.dialog({
				dialogClass: dClass,
				title: titleString,
				modal: true,
				width: width,
				resizable: false,
				minHeight: 0,
				dialogClass: 'modalDialog',
				closeOnEscape:false,
				zIndex: 9, // so that datepickers appear on top of the dialogs
				position: {
					my: "center top",
					at: "center top"
				},
				open: function () {
					// Don't allow "background" to be scrollable when dialogs
					// are open.
					$("body").css("overflow", "hidden");
				}
			}).parent().appendTo($(document.getElementById(formId)));
			if (hideCloseButton) {
				$element.parent().find('button.ui-dialog-titlebar-close').remove();
			}
			return $element;
		};

		window.closeModalDialog = function (dialogId) {
			var $element = $(document.getElementById(dialogId));
			$element.dialog('destroy');
			// Allow "background" to be scrollable when dialogs are closed.
			$("body").css("overflow", "auto");
    };

		window.markEventReady = function () {
			// Ready to be qualified as incident
			validateHelper(qualifyEvent);
		};

		window.markIncidentReady = function () {
			// Ready to be reviewed
			validateHelper(readyForReview);
		};

		initializeSelect2();
		if ({!isViewMode}) {
			initializeInvolvedParties();
			$('#addRow').on('click', function() {
				if (alertPendingChanges()) return;
				addInvolvedPartyDialog.dialog('open');
			});
			setUpFields();
			initializeEventTypesTree();
		}
	});
	</script>

</apex:page>
