<apex:page controller="TxnQueueResponseController" extensions="MyRemoteMethods" standardStylesheets="true" sidebar="false" tabStyle="ESD_Home_DSP__tab">
    <apex:stylesheet value="{!URLFOR($Resource.mentoresd,'/mentoresdcss2.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'DataTables-1.10.9/css/jquery.dataTables.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'jquery-ui-1.11.4.custom/jquery-ui.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DataTables1109, 'Select-1.0.1/css/select.dataTables.min.css')}" />     
    <apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'jQuery-2.1.4/jquery-2.1.4.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'DataTables-1.10.9/js/jquery.dataTables.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'jquery-ui-1.11.4.custom/jquery-ui.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.DataTables1109, 'Select-1.0.1/js/dataTables.select.min.js')}" />
    <!-- <script src="../../soap/ajax/31.0/connection.js" type="text/javascript"></script> -->
	<!-- <script src="../../soap/ajax/31.0/apex.js" type="text/javascript"></script> -->
    <apex:includeScript value="{!URLFOR($Resource.select2js, 'select2-4.0.1/dist/js/select2.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.select2js, 'select2-4.0.1/dist/css/select2.min.css')}" />
    <apex:includeScript value="{!$Resource.AnnotoriousDev}" />
    <apex:stylesheet value="{!URLFOR($Resource.Annotorious, 'css/annotorious.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.CommonJS)}" />
    <apex:remoteObjects >
        <apex:remoteObjectModel name="Transaction_Queue__c" fields="Id,Input_Params__c,Request_Type__c,Requested_Date_Time__c" jsShorthand="txnQ">
        </apex:remoteObjectModel>
    </apex:remoteObjects>
    <c:MyPreferences />
    <style>
        .select2-result-repository { padding-top: 1px; padding-bottom: 1px; }
        .select2-result-repository__avatar { float: left; width: 60px; margin-right: 5px; }
        .select2-result-repository__avatar img { width: 100%; height: auto; border-radius: 1px; }
        .select2-result-repository__meta { margin-left: 60px; }
        .select2-result-repository__title { color: black; font-weight: bold; word-wrap: break-word; line-height: 1.1; margin-bottom: 2px; }
        .select2-result-repository__forks, .select2-result-repository__stargazers { margin-right: 1em; }
        .select2-result-repository__forks, .select2-result-repository__stargazers, .select2-result-repository__watchers { display: inline-block; color: #aaa; font-size: 11px; }
        .select2-result-repository__description { font-size: 13px; color: #777; margin-top: 4px; }
        .select2-results__option--highlighted .select2-result-repository__title { color: white; }
        .select2-results__option--highlighted .select2-result-repository__forks, .select2-results__option--highlighted .select2-result-repository__stargazers, .select2-results__option--highlighted .select2-result-repository__description, .select2-results__option--highlighted .select2-result-repository__watchers { color: #c6dcef; }
        .clearfix:before, .clearfix:after { content: " "; display: table; }
        .clearfix:after { clear: both; }
        .select2-results__option { margin-left: 0 !important;}
        
        #reportEventErrors, .error {
        color: red;
        font-weight: bold;
        border: none;
        }
        
        .txtarea {
        width: 90%;
        }
        
        .thinking {
        opacity: 0.8;
        background-color: #ccc;
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        z-index: 100000;
        }
        
        .thinkingwheel {
        position: absolute;
        left: 40%;
        top: 48%;
        background-color: white;
        border: 2px solid gray;
        padding: 2px;
        }
        
        .dataTables_wrapper {
        position: relative;
        clear: none;
        zoom: 1;
        }
        
        td.details-control {
        background:
        url("{!URLFOR($Resource.DetailsOpenClose, 'details_open.png')}")
        no-repeat center center;
        cursor: pointer;
        }
        
        tr.shown td.details-control {
        background:
        url("{!URLFOR($Resource.DetailsOpenClose, 'details_close.png')}")
        no-repeat center center;
        }
        
        .fancytree-container {
        border: none !important;
        }
    </style>
    <apex:form id="reportEventForm">
        <apex:actionFunction name="saveEvent" action="{!incident.mySave}" status="reportEventStatus" rerender="reportEventBlock,involvedPartyBlock" onComplete=""/>
        <apex:actionFunction name="editEvent" action="{!incident.myEdit}" status="reportEventStatus" rerender="reportEventBlock,involvedPartyBlock" onComplete="initializeSelect2();"/>
        <apex:actionFunction name="cancel2ViewOrHome" action="{!incident.myCancel}" status="reportEventStatus" rerender="reportEventBlock,involvedPartyBlock" onComplete="" />
        <apex:actionFunction name="submitEvent" action="{!incident.mySave}" status="reportEventStatus" rerender="reportEventBlock,involvedPartyBlock" onComplete="">
            <apex:param name="actionType" value="Event-Submitted" assignTo="{!incident.actionType}" />
        </apex:actionFunction>
        <apex:actionFunction name="disregardEvent" action="{!incident.mySave}" status="reportEventStatus" rerender="reportEventBlock,involvedPartyBlock" onComplete="">
            <apex:param name="actionType" value="Event-Disregarded" assignTo="{!incident.actionType}" />
        </apex:actionFunction>
        <span class="ui-helper-hidden-accessible"><input type="text" /></span>
        <div id='reportEventErrors'></div>
        <apex:pageBlock id="reportEventBlock" title="{!incident.eventTitle}" >
            <apex:variable var="editPage" value="{!incident.editMode}" />
            <apex:pageMessages ></apex:pageMessages>
            <apex:pageBlockButtons location="top">
                <div style="float: right" id="pageBlockButtons">
                    <apex:outputPanel layout="none" rendered="{!editPage}">
                        <a class="btn" onclick="return (handleFormErrors() ? saveEvent() : false);">Save</a>
                        <a class="btn" onclick="cancel2ViewOrHome();">Cancel</a>
                    </apex:outputPanel>	
                    <apex:outputPanel layout="none" rendered="{!!editPage && !incident.isLocked}">
                        <a class="btn" onclick="editEvent();return false;">Edit</a>
                        <a class="btn" onclick="submitEvent();return false;">Submit</a>
                        <a class="btn" onclick="disregardEvent();return false;">Disregard</a>
                    </apex:outputPanel>
                </div>			
            </apex:pageBlockButtons>
            
            <apex:pageBlockSection columns="2">
                <apex:pageBlockSectionItem >
                    <label>Reported By/Documented By</label>
                    <apex:outputText value="{!incident.event.Reported_By_Name}" />
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="dateDocumented_pickerId">Date Documented</label>
                    <!-- 					<apex:outputPanel layout="none"> -->
                    <!-- 						<apex:outputPanel rendered="{!editPage}"> -->
                    <!-- 							<div class="requiredInput"> -->
                    <!-- 								<div class="requiredBlock"></div> -->
                    <!-- 								<c:UserPreferredTimePicker edit="true" -->
                    <!-- 									hiddenFieldId="dateDocumented" -->
                    <!-- 									dateTimeVal="{!IF(incident.event.date_documented==null, NOW(), incident.event.date_documented)}" -->
                    <!-- 									datetimepickerid="dateDocumented_pickerId" /> -->
                    <!-- 								<apex:inputHidden value="{!incident.event.date_documented}" -->
                    <!-- 									id="dateDocumented" /> -->
                    <!-- 							</div> -->
                    <!-- 						</apex:outputPanel> -->
                    <!-- 						<apex:outputPanel rendered="{!!editPage}" layout="none"> -->
                    <c:UserPreferredTimePicker dateTimeVal="{!incident.event.date_documented}" />
                    <!-- 						</apex:outputPanel> -->
                    <!-- 					</apex:outputPanel> -->
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label>Supervisor</label>
                    <apex:outputPanel layout="none">
                        <apex:outputText value="{!incident.event.Supervisor_Name}" />
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <label for="programAssociatedToEvent">Program Associated to Event</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel rendered="{!editPage}">
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <apex:selectList multiselect="false" size="1"
                                                 html-placeholder="select one"
                                                 value="{!incident.event.Service_Location}"
                                                 id="programAssociatedToEvent">
                                    <apex:selectOptions value="{!myService_Locations}" />
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.Service_Location_Name}" rendered="{!!editPage}" />
                        <apex:inputHidden value="{!incident.event.Service_Location}" id="hiddenprogramAssociatedToEvent" rendered="{!!editPage}"/>						
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <label for="whoShouldReviewThisEvent?">Who should review this event?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}">
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <select style="width: 80%;" data-allow-clear="false" class="tmnAccessReviewerEnhancedSelect select2UpdateHiddenFld" data-hidden-field="supervisor_for_Location">
                                    <option value="{!incident.event.Supervisor_for_Location}" selected="selected">{!incident.event.Supervisor_for_Location_Name}</option>
                                </select>
                            </div>
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.Supervisor_for_Location_Name}" rendered="{!!editPage}" />
                        <apex:inputHidden value="{!incident.event.Supervisor_for_Location}" id="supervisor_for_Location" rendered="{!editPage}"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <label for="whatHappened">What Happened?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}" >
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <apex:inputTextarea id="whatHappened" rows="3"
                                                    value="{!incident.event.What_Happened}" style="width: 90%;" html-placeholder="Please provide brief summary only." />
                            </div>
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.What_Happened}" rendered="{!!editPage}"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <label for="WhereDidItHappen">Where did it happen?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel rendered="{!editPage}">
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <apex:selectList multiselect="false" size="1"
                                                 html-placeholder="select one"
                                                 value="{!incident.event.Where_did_it_happen}"
                                                 id="WhereDidItHappen">
                                    <apex:selectOptions value="{!incident.wheredidItHappenOptions}" />
                                </apex:selectList>
                            </div>
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.Where_did_it_happen}" rendered="{!!editPage}" />
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="WhenDidItHappen_pickerId">When did it happen?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}" >
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <c:UserPreferredTimePicker edit="true"
                                                           hiddenFieldId="WhenDidItHappen"
                                                           dateTimeVal="{!incident.event.When_did_it_happen}"
                                                           datetimepickerid="WhenDidItHappen_pickerId" />
                                <apex:inputHidden value="{!incident.event.When_did_it_happen}"
                                                  id="WhenDidItHappen" />
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="none" rendered="{!!editPage}">
                            <c:UserPreferredTimePicker dateTimeVal="{!incident.event.When_did_it_happen}" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="WhenWasTheSupervisorNotified_pickerId">When was the
                        Supervisor notified?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}" >
                            <div class="requiredInput">
                                <div class="requiredBlock"></div>
                                <c:UserPreferredTimePicker edit="true"
                                                           hiddenFieldId="WhenWasTheSupervisorNotified"
                                                           dateTimeVal="{!incident.event.When_was_the_Supervisor_notified}"
                                                           datetimepickerid="WhenWasTheSupervisorNotified_pickerId" />
                                <apex:inputHidden value="{!incident.event.When_was_the_Supervisor_notified}"
                                                  id="WhenWasTheSupervisorNotified" />
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel layout="none" rendered="{!!editPage}">
                            <c:UserPreferredTimePicker dateTimeVal="{!incident.event.When_was_the_Supervisor_notified }" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <label for="whoElseOnStaffWasNotified">Who else on staff was notified?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}">
                            <select data-placeholder="Search Staff" style="width: 80%;" data-allow-clear="true" multiple="multiple"
                                    class="tmnAccessEnhancedSelect select2UpdateHiddenFld" data-hidden-field="whoElseOnStaffWasNotified">
                                <apex:repeat value="{!incident.event.NotifiedStaffJSON}" var="s">
                                    <option value="{!s}" selected="selected">{!incident.event.NotifiedStaffJSON[s]}</option>
                                </apex:repeat>
                            </select>
                            <apex:inputHidden value="{!incident.event.Notified_Staff}" id="whoElseOnStaffWasNotified" />
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.Notified_Staff_Names}" rendered="{!!editPage}" />
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="whichAgenciesWereNotified">What external parties were notified?</label>
                    <apex:outputPanel layout="none">
                        <apex:outputPanel layout="none" rendered="{!editPage}">
                            <select data-placeholder="Select Agencies" style="width: 70%;"
                                    data-allow-clear="true" multiple="multiple"
                                    value="{!incident.event.Agencies_notified}" class="agenciesEnhancedSelect select2UpdateHiddenFld" data-hidden-field="whichAgenciesWereNotified">
                                <apex:outputText value="{!incident.OptsForAgenciesNotified}" escape="false" />
                            </select>
                            <apex:inputHidden value="{!incident.event.Agencies_notified}" id="whichAgenciesWereNotified" />
                        </apex:outputPanel>
                        <apex:outputText value="{!incident.event.Agencies_notified}" rendered="{!!editPage}"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="narrativeForAgencies">External Parties Narrative</label>
                    <apex:outputPanel layout="none">
                        <apex:inputTextarea id="narrativeForAgencies" rows="3" value="{!incident.event.Agencies_notified_narrative}" rendered="{!editPage}" style="width: 70%;"/>
                        <apex:outputText value="{!incident.event.Agencies_notified_narrative}" rendered="{!!editPage}"/>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:pageBlockSection columns="1" collapsible="false">
                <apex:outputPanel layout="block" id="involvedPartyBlock" >
                    <apex:outputPanel layout="block" id="involvedPartyBlock2" rendered="{!!incident.editMode}">
                        <span style="float: right;padding-right: 2em;">
                            <apex:outputPanel layout="none" rendered="{!!incident.isLocked}" >
                                <a class="btn" id="addRow">Add Involved Party</a>
                            </apex:outputPanel>
                        </span>
                        
                        <div id="collapseDiv" style="padding: 2em 2em 1em 2em;">
                            <table id="involvedPartiesTable" cellspacing="0" class="hover" style="width:100%">
                                <thead>
                                    <tr>
                                        <th style="width: 1em;"></th>		 				<!-- show-detail image -->
                                        <th></th>		 				<!-- involved Party Id-->
                                        <th style="width: 15%;">Who was involved?</th>		<!-- Party Type -->
                                        <th style="text-align: left;">Name</th>		<!-- Party Name -->
                                        <th style="text-align: Right;">Action</th>		<!-- Add Event, delete this involved party-->
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </apex:outputPanel>
                    
                </apex:outputPanel>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>
    
    
    <apex:actionStatus id="reportEventStatus" layout="block"
                       onstart="j$('#pageBlockButtons').toggle();">
        <apex:facet name="start">
            <div class="thinking">
                <div class="thinkingwheel">
                    <span><img class="waitingImage" src="/img/loading.gif"
                               title="Please Wait..." />&nbsp; Processing...</span>
                </div>
            </div>
        </apex:facet>
        <apex:facet name="stop"></apex:facet>
    </apex:actionStatus>
    
    <div id="Add-Involved-Party" title="Add Involved Party" >
        <div style="color:red; font-weight: bold;" id="Add-Involved-Party-Error"></div>
        <apex:pageBlock >
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <label for="involved-PartyType" style="white-space: nowrap;">Who was involved?</label>
                    <apex:outputPanel >
                        <div class="requiredInput">
                            <div class="requiredBlock"></div>
                            <select name="Type__c" id="involved-PartyType" data-placeholder="Please select" style="width: 80%;" class="simpleSelect2"
                                    data-visibility-row-rules="true" data-visibility-rules="{&quot;Person Being Served&quot;:[&quot;involved-Party-PBS&quot;],&quot;Staff&quot;:[&quot;involved-Party-Staff&quot;],&quot;Host Home Parent&quot;:[&quot;involved-Party-NameOfIndividual&quot;],&quot;Other Family Member&quot;:[&quot;involved-Party-NameOfIndividual&quot;],&quot;Other&quot;:[&quot;involved-Party-NameOfIndividual&quot;]}" >
                                <option></option>
                                <option value="Person Being Served">Person Being Served</option>
                                <option value="Staff">Staff</option>
                                <option value="Host Home Parent">Host Home Parent</option>
                                <option value="Other Family Member">Other Family Member</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="involved-Party-PBS" style="white-space: nowrap;">Person Being Served</label>
                    <apex:outputPanel >
                        <div class="requiredInput">
                            <div class="requiredBlock"></div>
                            <select name="Person_Being_Served_Involved__c" id="involved-Party-PBS" data-placeholder="Search PBS" style="width: 80%;" data-allow-clear="true" class="pbsEnhancedSelect" >
                                <option></option>
                            </select>
                        </div>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="involved-Party-Staff" style="white-space: nowrap;">Staff</label>
                    <apex:outputPanel >
                        <div class="requiredInput">
                            <div class="requiredBlock"></div>
                            <select name="Staff_Involved__c" id="involved-Party-Staff" data-placeholder="Search Staff" style="width: 80%;" data-allow-clear="true" class="tmnAccessEnhancedSelect">
                                <option></option>
                            </select>
                        </div>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <label for="involved-Party-NameOfIndividual" style="white-space: nowrap;">Name of Individual</label>
                    <apex:outputPanel >
                        <div class="requiredInput">
                            <div class="requiredBlock"></div>
                            <input name="Name" type="text" id="involved-Party-NameOfIndividual" style="width: 80%;" />
                        </div>
                    </apex:outputPanel>
                </apex:pageBlockSectionItem>
                <input type="hidden" value="{!incident.event.id}" name="Im_Incident__c"/>
            </apex:pageBlockSection>
        </apex:pageBlock>
        
    </div>
    
    <script>
    function setFocusOnLoad() {}
    //var tmnAccessData;
    var j$ = jQuery.noConflict();
    j$(document).ready(function($) {
        //sforce.connection.sessionId = '{!$Api.Session_ID}';
        //tmnAccessData = sforce.apex.execute("TmnAccess", "getTmnUsers", {});
        initializeSelect2();
        if ('{!!incident.editMode}') {
            initInvolvedPartyTbl();
            j$('#addRow').on('click', function() {
                dialog.dialog('open');
                // table.ajax.reload();
                //table.row.add( [ {"id": '.1', "text":'.2'}] ).draw( false );
            });
            setUpFields = function() {
                $('body input').on("change", function(event) {
                    applyRulesToField(event.target);
                    applyShowHideRulesToField(event.target);
                });
                $('body select').on("change", function(event) {
                    applyRulesToField(event.target);
                    applyShowHideRulesToField(event.target);
                });
                $('body input').each(function(_, target) {
                    applyRulesToField(target);
                    applyShowHideRulesToField(target);
                });
                $('body select').each(function(_, target) {
                    applyRulesToField(target);
                    applyShowHideRulesToField(target);
                });
            }
            setUpFields();
        }
    });
    
    window.formatStaff = function(staff) {
        if (staff.loading) return staff.text;
        var markup = "<div class='select2-result-repository clearfix'>" +
            "<div class='select2-result-repository__avatar'></div>" +
            "<div class='select2-result-repository__title'>" + staff.text + "</div>";
        if (staff.jobTitle) {
            markup += "<div class='select2-result-repository__description'>" + staff.jobTitle + "</div>";
        }
        if (staff.email) {
            markup += "<div class='select2-result-repository__statistics'>" +
                "<div class='select2-result-repository__forks'><i class='fa fa-flash'></i> " + staff.email + "</div>" +
                "</div>";
        }
        markup += "</div></div>";
        return markup;
    }
    
    window.formatStaffSelection = function(staff) {
        return staff.text;
    }
    
    window.formatPBS = function(pbs) {
        if (!pbs.obj) return pbs.text;
        var obj = pbs.obj;
        var markup = "<div class='select2-result-repository clearfix'>";
        if (obj.Flavor__c) markup += "<div class='select2-result-repository__avatar'><img src='" + obj.Flavor__c + "'/></div>";
        markup += "<div class='select2-result-repository__meta'>";
        markup += "<div class='select2-result-repository__title'>" + obj.pbsFirstName__c + ' ' + obj.pbsLastName__c + "</div>";
        if (obj.Person_Being_Served__r.Gender__c || obj.Person_Being_Served__r.Age_Text__c) {
            markup += "<div class='select2-result-repository__statistics'>" +
                "<div class='select2-result-repository__forks'><i class='fa fa-flash'></i> " + obj.Person_Being_Served__r.Gender__c + ', Age - ' + obj.Person_Being_Served__r.Age_Text__c + "</div>" +
                "</div>";
        }
        markup += "</div></div>";
        return markup;
    }
    
    window.formatPBSSelection = function(pbs) {
        return (pbs.obj ? pbs.obj.pbsFirstName__c + ' ' + pbs.obj.pbsLastName__c : pbs.text);
    }
    
    window.initializeSelect2 = function() {
        j$(".tmnAccessEnhancedSelect").select2({
            //data: JSON.parse(tmnAccessData)
            minimumInputLength: 3,
            escapeMarkup: function(markup) {
                return markup;
            },
            templateResult: window.formatStaff,
            templateSelection: window.formatStaffSelection,
            ajax: {
                processResults: function(data) {
                    return {
                        results: data
                    };
                },
                minimumInputLength: 3,
                cache: true,
                delay: 100,
                data: function(params) {
                    return {
                        q: params.term, // search term
                        page: params.page,
                        programLocation: j$('[id$=programAssociatedToEvent]').val()
                    };
                },
                transport: function(params, success, failure) {
                    MyRemoteMethods.getStaffFortheProgram(JSON.stringify(params.data), function(result, event) {
                        if (!event.status) {
                            j$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
                            return false;
                            failure(event.message);
                        } else {
                            //tmnAccessData = JSON.stringify(result);
                            success(result);
                        }
                    });
                }
            }
        });
        
        j$(".tmnAccessReviewerEnhancedSelect").select2({
            minimumInputLength: 3,
            escapeMarkup: function(markup) {
                return markup;
            },
            templateResult: window.formatStaff,
            templateSelection: window.formatStaffSelection,
            ajax: {
                processResults: function(data) {
                    return {
                        results: data
                    };
                },
                minimumInputLength: 3,
                cache: true,
                delay: 100,
                data: function(params) {
                    return {
                        q: params.term, // search term
                        page: params.page,
                        programLocation: j$('[id$=programAssociatedToEvent]').val()
                    };
                },
                transport: function(params, success, failure) {
                    MyRemoteMethods.getEventReviewerForProgram(JSON.stringify(params.data), function(result, event) {
                        if (!event.status) {
                            j$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
                            return false;
                        } else {
                            success(result);
                        }
                    });
                }
            }
        });
        
        j$(".pbsEnhancedSelect").select2({
            minimumInputLength: 3,
            escapeMarkup: function(markup) {
                return markup;
            },
            templateResult: window.formatPBS,
            templateSelection: window.formatPBSSelection,
            ajax: {
                processResults: function(data) {
                    return {
                        results: data
                    };
                },
                minimumInputLength: 3,
                cache: true,
                delay: 100,
                data: function(params) {
                    return {
                        q: params.term, // search term
                        page: params.page,
                        programLocation: j$('[id$=programAssociatedToEvent]').val()
                    };
                },
                transport: function(params, success, failure) {
                    MyRemoteMethods.getPBSFortheProgram(JSON.stringify(params.data), function(result, event) {
                        if (!event.status) {
                            j$('.select2-results__options').empty().append('<li class="error">' + event.message + '</li>');
                            return false;
                        } else {
                            success(result);
                        }
                    });
                }
            }
        });
        
        
        j$(".agenciesEnhancedSelect").select2({
            tags: true,
            tokenSeparators: [',']
        });
        j$(".simpleSelect2").select2({
            minimumResultsForSearch: Infinity,
            allowClear: true
        });
        j$(".select2UpdateHiddenFld").each(function(i) {
            var $target = j$(this);
            if (!$target.data('hidden-field')) return true;
            // $target.val(j$('[id$=' + $target.data('hidden-field') + ']').val().split(",")).trigger("change"); - not needed now that i am not using select2 on the read only mode
            $target.on("change", function(e) {
                j$('[id$=' + $target.data('hidden-field') + ']').val($target.val());
            });
        });
    }
    window.handleFormErrors = function() {
        var eventErrors = [];
        j$('#reportEventErrors').html('');
        // select all the required input fields and set the hidden boolean and the error message fields.
        j$(".requiredInput :input").filter(":visible").each(function(_, target) {
            var $target = j$(target);
            if ($target.val() == '') {
                eventErrors.push(j$('label[for="' + $target.attr('id').substring($target.attr('id').lastIndexOf(':') + 1) + '"]')[0].innerHTML + ' field is mandatory.');
            }
        });
        // This logic below looks for any multi checkboxes marked as required.
        j$(".requiredInput").prev().filter(":visible").each(function(_, target) {
            var $target = j$(target);
            var multiCheckValid = false;
            j$('[id^=' + $target.prop("for") + '] :input').each(function(_, multiCheckBox) {
                if (multiCheckBox.checked) {
                    multiCheckValid = true;
                    return false;
                }
            });
            if (!multiCheckValid && j$('[id^=' + $target.prop("for") + '] :input').length > 0) {
                eventErrors.push('At least one checkbox is required from the multiple checkboxes for - ' + $target.prop('innerHTML') + '.');
            }
        });
        if (moment(j$('[id$=WhenDidItHappen_pickerId]').val()).isAfter()) {
            eventErrors.push('The value for "When did it happen?" cannot be in the future. Please adjust the "When did it happen?" for the event.');
        }
        if (!moment(j$('[id$=WhenWasTheSupervisorNotified_pickerId]').val()).isAfter(moment(j$('[id$=WhenDidItHappen_pickerId]').val()))) {
            eventErrors.push('The value "When was the Supervisor notified?" cannot occur prior to the date/time of "When did it happen?".');
        }
        if (eventErrors.length > 0) {
            j$(window).scrollTop(0);
            j$.each(eventErrors, function(index, error) {
                j$('#reportEventErrors').append('<li class="error">' + error + '</li>');
            });
            return false;
        }
        return true;
    };
    
    window.pullDownRowDetails = function(d, docRecs) {
        var htmlRecurrences;
        htmlRecurrences = '<div class="slider">' +
            '<table cellspacing="0" border="1px" width="70%">' +
            '<thead>' +
            '<tr>' +
            '<th>Document Name</th>' +
            '<th>Status</th>' +
            '<th>Received Date</th>' +
            '</tr>' +
            '</thead>' +
            '<tbody>';
        
        $.each(docRecs, function(index, docRec) {
            htmlRecurrences += '<tr>' +
                '<td>' + d[3] + '</td>' +
                '<td>' + docRec.Status__c + '</td>' +
                '<td>' + docRec.Status_Date__c + '</td>' +
                '</tr>';
        });
        htmlRecurrences += '</tbody>' +
            '</table>' +
            '</div>';
        return htmlRecurrences;
    }
    
    
    dialog = j$('#Add-Involved-Party').dialog({
        customOption: {
            rowData: '',
            therapyHr: '',
            selectedRow: ''
        },
        width: 500,
        autoOpen: false,
        modal: true,
        open: function() {
            // var ui_dialog_interaction;
            if (j$.ui && j$.ui.dialog && !j$.ui.dialog.prototype._allowInteractionRemapped && j$(this).closest(".ui-dialog").length) {
                /* if (j$.ui.dialog.prototype._allowInteraction) {
                j$.ui.dialog.prototype._allowInteraction = function (e) {
                    if (j$(e.target).closest('.select2-drop').length) return true;
                    return ui_dialog_interaction.apply(this, arguments);
                };
                j$.ui.dialog.prototype._allowInteractionRemapped = true;
            }
            else {
                j$.error("You must upgrade jQuery UI or else.");
            } */
            
            var ui_dialog_interaction = j$.ui.dialog.prototype._allowInteraction;
            j$.ui.dialog.prototype._allowInteraction = function(e) {
                return true;
                if (j$(e.target).closest('.select2-drop').length) return true;
                return ui_dialog_interaction.apply(this, arguments);
            };
            
        }
    },
    _allowInteraction: function(event) {
        return !!j$(event.target).is(".select2-input") || this._super(event);
    },
    create:function () {
        j$(this).closest(".ui-dialog")
        .find(".ui-button")
        .addClass("");
    },
    buttons: {
        "Save": function() {
            var dataObj = j$.grep(j$('#Add-Involved-Party :input').serializeArray(),function(k,i){return k.value? true: false;});
            if (j$('#involved-PartyType').val() == '') {
                j$('#Add-Involved-Party-Error').html('You must select "Who was involved?" to proceed.');
                return false;
            }
            else if (dataObj.length < 3){
                j$('#Add-Involved-Party-Error').html('Missing required input.');
                return false;
            }
            var formdata = {};
            j$(dataObj).each(function(index, obj){
                formdata[obj.name] = obj.value;
            });
            var ImInvolvedParty = new SObjectModel.txnQ({               
                Request_Type__c: 'Insert-Im_InvolvedParty',
                Input_Params__c: JSON.stringify(formdata),
                Requested_Date_Time__c : new Date(new Date().valueOf() + new Date().getTimezoneOffset() * 60000)
            });
            j$('[Id="{!$Component.reportEventStatus}.start"]').toggle();
            ImInvolvedParty.upsert(function(err, ids) {
                if (err) {
                    console.log(err);
                    j$('#Add-Involved-Party-Error').html(err.message.slice(err.message.lastIndexOf('FIELD_CUSTOM_VALIDATION_EXCEPTION,')+('FIELD_CUSTOM_VALIDATION_EXCEPTION,').length, err.message.lastIndexOf(': []')));
                    j$('[Id="{!$Component.reportEventStatus}.start"]').toggle();
                } else {
                    j$('#involvedPartiesTable').DataTable().draw();
                    j$('#involved-PartyType').val('').trigger('change');
                    j$('#Add-Involved-Party-Error').html('');
                    dialog.dialog("close");
                    j$('[Id="{!$Component.reportEventStatus}.start"]').toggle();
                }
            });
        },
        Cancel: function() {
            j$('#Add-Involved-Party-Error').html('');
            j$('#involved-PartyType').val('').trigger('change');
            dialog.dialog("close");
        }
    }
});
    
    
    window.initInvolvedPartyTbl = function() {
        var table = j$('#involvedPartiesTable').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "searching": false,
            "order": [
                [2, 'desc']
            ],
            "processing": true,
            "serverSide": true,
            "ajax": function(data, callback, settings) {
                // vf remote to retrieve table data
                MyRemoteMethods.getInvolvedParties('{!incident.event.id}', function(result, event) {
                    if (!event.status) {
                        j$('#reportEventErrors').append('<li class="error">' + event.message + '</li>');
                        j$('#reportEventErrors').show();
                    } else {
                        callback(JSON.parse('{"data":' + JSON.stringify(result) + '}'));
                    }
                });
            },
            "columns": [{
                "class": "details-control",
                "orderable": false,
                "data": null,
                "defaultContent": ""
            }, {
                "data": "id"
            }, {
                "data": "type"
            }, {
                "data": "name"
            }, {
                "data": "action"
            }],
            "columnDefs": [{
                "visible": false,
                "targets": 1
            }]
        });
        
        // Array to track the ids of the details displayed rows
        var detailRows = [];
        
        j$('#involvedPartiesTable tbody').on('click', 'td.details-control', function() {
            var tr = j$(this).closest('tr');
            var row = table.row(tr);
            var idx = j$.inArray(tr.attr('id'), detailRows);
            
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                tr.removeClass('shown');
                
                // Remove from the 'open' array
                detailRows.splice(idx, 1);
                
            } else {
                // Open this row
                //					docRecs = [];
                //					j$.each(assocDocRecurrences, function(index, docRec) {
                //						if (docRec.PB_AssociatedDoc__c === row.data()[1]) {
                //							docRecs.push(docRec);
                //						}
                //					});
                //					row.child(format(row.data(), docRecs)).show();
                row.child('---Hello this is the child row where the magic is to happen---- <input type="text" onblur="dialog.dialog(\'open\')" /><a class="btn" onClick="console.log(this);j$(#addRow).trigger(\"click\");return false;">ClickMe</a>').show();
                tr.addClass('shown');
                
                // Add to the 'open' array
                if (idx === -1) {
                    detailRows.push(tr.attr('id'));
                }
            }
        });
        
        // On each draw, loop over the `detailRows` array and show any child rows
        table.on('draw', function() {
            j$.each(detailRows, function(i, id) {
                j$('#' + id + ' td.details-control').trigger('click');
            });
        });
        
    }
    </script>
    
</apex:page>