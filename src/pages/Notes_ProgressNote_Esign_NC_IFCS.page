<apex:page standardController="Progress_Note__c" extensions="Notes_ProgressNote_View_Plan_Chlrn,ProgressNote_Esign" showHeader="false" sidebar="false" id="myPage" docType="html-5.0">
<apex:includeScript value="{!URLFOR($Resource.jquery, '/js/jquery-1.7.2.min.js')}" />
<apex:includeScript value="{!$Resource.eSignature_js}" />
<apex:outputLabel rendered="false" id="numsigs" value="{!Progress_Note__c.Number_of_Required_Signatures__c}" />
<apex:variable value="{!IF(Progress_Note__c.Direct_Contact__c = 1, 'true', 'false')}" var="mydirect"/>
<apex:variable value="{!IF(Progress_Note__c.Direct_Contact__c != 1, 'true', 'false')}" var="myindirect"/>

<apex:outputPanel style="display: none">
<apex:outputField value="{!Progress_Note__c.Service_Assignment__c}"/>
<apex:outputField value="{!Progress_Note__c.Admission__c}"/>
<apex:outputField value="{!Progress_Note__c.Action_Plan__c}"/>
</apex:outputPanel>

<head>

<script>
   $j = jQuery.noConflict();

   var numsigs = 0;

   $j(document).ready(function() {
    {!IF($ObjectType.Progress_Note__c.updateable,"", "alert('Insufficient privilege to e-sign document.'); window.close();")}

    var numsigstr =  '{!Progress_Note__c.Number_of_Required_Signatures__c};'
    if (numsigstr != '')
        numsigs = parseInt( numsigstr );
        
    // dynamically append required number of signature lines
    var newdiv;
    for (i=0; i<numsigs;i++) {
        newdiv = '<div id="divusername' + i + '" style="padding-left:20px;" align="left">Name (Print): &nbsp;<input id="UserNme" type="text" onchange="drawSignerNames(\'EsignInfo\',numsigs )" style="width:50%" /></div>';
        $j(newdiv).appendTo('#signatureblock');
    }
    });
   
   function saveSignature( note_id ){
        var sigcanvas = $j('#EsignInfo');
        var image_data = sigcanvas[0].toDataURL("image/png");
        var htmlsource = document.documentElement.outerHTML;
        var newstr = "";
        var indexOfBase64String = -1;
        var lengthOfBase64String = 0;
        if (image_data.indexOf("data:")== 0 )
         {
            //remove unwanted header
            indexOfBase64String = image_data.indexOf(",") + 1;
            lengthOfBase64String = image_data.length - indexOfBase64String;
            newstr  = image_data.substring(indexOfBase64String, lengthOfBase64String);
        }
    $j.ajax({
        type: 'POST',
        timeout: 20000,
         url: '/apex/Notes_ProgressNote_ajaxpostback',
         data: {
            id : note_id,
            img : newstr
        },
         success: function (msg) {
             alert("Your signed form has been attached to the progress note.  Please refresh the note to see the attachment. ");
         },
         error: function (xhr, status) {
              switch (status) {
                 case 404:
                     alert('File not found');
                     break;
                 case 500:
                     alert('Server error');
                     break;
                 case 0:
                     alert('Request aborted');
                     break;
                 default:
                     alert('Unknown error: ' + xhr.status);
             } 
         }
     });
      return false;
      }
      

      function addcheckbox2(text, line, width, checkme, intplace, showthis){
          //sets the defaul of show this to true so it doesnt need to be specified
          if(typeof(showthis)==='undefined') showthis = true;
          var hreturn=0;
          if(showthis){
                    var cb = " ";
                    var canvas = document.getElementById("EsignInfo");
                    var context = canvas.getContext('2d');                    
                    context.font = "bold 12px sans-serif";
                    hreturn +=16;
                    context.textAlign="left";
                    context.strokeRect(intplace, line-10, 9,9);   
                    context.fillText(text, intplace+15 , line, width );
                    if(checkme)
                        {context.fillRect(intplace, line-10, 9,9);}
                    else
                        {context.strokeRect(intplace, line-10, 9,9);}
          }   
          return hreturn;
      } 
function fragmentText(text, maxWidth) {
    var words = text.split(' '),
        lines = [],
        line = "";
    if (ctx.measureText(text).width < maxWidth) {
        return [text];
    }
    while (words.length > 0) {
        while (ctx.measureText(words[0]).width >= maxWidth) {
            var tmp = words[0];
            words[0] = tmp.slice(0, -1);
            if (words.length > 1) {
                words[1] = tmp.slice(-1) + words[1];
            } else {
                words.push(tmp.slice(-1));
            }
        }
        if (ctx.measureText(line + words[0]).width < maxWidth) {
            line += words.shift() + " ";
        } else {
            lines.push(line);
            line = "";
        }
        if (words.length === 0) {
            lines.push(line);
        }
    }
    return lines;
}           
var drawingMade = false;
function updateDrawingMade() {
    drawingMade = true;
    return true;
}
function validate() {
    if (!drawingMade || $j("input#UserNme").val()=="") {
        alert('Please Sign the Note and Enter your information on the Print Name line before selecting Electronically Sign.');
        return false;
    }
    return true;
}
</script>

</head>
<body>
 <apex:image id="ifcsimg" rendered="true" style="display:none" url="{!$Resource.NC_IFCS_Image}"/>
 

 
<table style="width:100%; padding:7px">
 <tr>
   <td align="left">
   <canvas id="EsignInfo" onfocus='init("EsignInfo", "EsignImg")' onmousedown='updateDrawingMade(); startDrawing("EsignInfo")'
   onmouseup='stopDrawing("EsignInfo")' onmouseout='stopDrawing("EsignInfo")' height="1500" width="890" style="border:1px solid #d3d3d3;display:block;">
   <p>At this time this browser is unsupported</p>
   </canvas>
   <img src="" id="EsignImg" style="border:1px solid #d3d3d3;display:none;"/>
  </td>
 </tr>
</table>
<div id="signatureblock" />
<apex:form />
    <div style="padding-left:20px;" align="left">
        <input type="button" id="btnSign" value="Electronically Sign" onclick="if(!validate()) return false; printCanvas('EsignInfo','EsignImg',numsigs, this.id); return saveSignature( '{!Progress_Note__c.id}'); " />
            &nbsp;
        <input type="button" value="Re-sign Document" onclick="drawingMade=false;clearCanvas('EsignInfo', 'EsignImg',numsigs, btnSign);return false;" />

    </div>

</body>
<script type="text/javascript">


    window.onload = function () {
       if (initdata == false) {
            init("EsignInfo", "EsignImg");
            initdata = true;
        } 
    }

  function drawData() {
  
        //checkboxes

        var cb = " ";
    
        var canvas = document.getElementById("EsignInfo");
        var context = canvas.getContext('2d');
        var height = canvas.attributes.height.value;
        var width = canvas.attributes.width.value;
        var metrics;
        var fontsize = 18;
        line = 0;
        
        var col1 = 2;
        var col2 = col1 + (width* .40); // 40%
        var col3 = col2 + (width *.40); // 40%
        var col1indent = col1 + 20;
        var col1indent2 = col1 + 40;
        var col1indent3 = col1 + 80;

		// CTEAE-63 - remove IFCS Logo.  Just have text as in other NC notes
		context.lineWidth = 1;
        context.fillStyle = "#000000";
        context.lineStyle = "#000000";
        context.font = "18px sans-serif";
        line += 2;
        var text = "NC Division of Mental Health, Developmental Disabilities and Substance Abuse Services";

        metrics = context.measureText(text);
        context.fillText(text, (width / 2) - (metrics.width / 2), line += (fontsize));
                
        context.font = "14px sans-serif";

        line += 22;
        context.moveTo(0, line);
        context.lineTo(width, line);
        context.stroke();

        line += 22;
        context.textAlign="left";
        text = "Client Name: {!JSENCODE(Progress_Note__c.Person_Being_Served__r.Name)} " ; 
        context.fillText(text, 2, line );

        context.textAlign="right";
        text = "Record Number: {!Progress_Note__c.Person_Being_Served__r.Other_ID__c}"; 
        context.fillText(text, (width) - 2, line - 2);
        
        line += fontsize;
        context.textAlign="left";
        text = "Medicaid ID: {!Progress_Note__c.Person_Being_Served__r.Medicaid_ID__c}"; 
        metrics = context.measureText(text);
        context.fillText(text, 2, line );
                
        var newdate = new Date( '{!Progress_Note__c.Start_Time__c}');
        text = "Start Date/Time: " + (newdate.getMonth()+1) + "/" + newdate.getDate() + "/" + newdate.getFullYear() + ' ' + formatTime( newdate) ; 
        context.textAlign="right";
        context.fillText( text, width - 2, line );
        
        line += fontsize;
        context.textAlign="left";
        
        newdate = new Date( '{!Progress_Note__c.Person_Being_Served__r.Birthdate}');
        text = "DOB: " + (newdate.getMonth()+1) + "/" + newdate.getDate() + "/" + newdate.getFullYear();
        context.fillText(text, 2, line );
        
        newdate = new Date( '{!Progress_Note__c.End_Time__c}');
        text = "End Date/Time: " + (newdate.getMonth()+1) + "/" + newdate.getDate() + "/" + newdate.getFullYear() + ' ' + formatTime( newdate) ; 
        context.textAlign="right";
        context.fillText( text, width - 2, line );
        
        line += fontsize;
        context.textAlign="left";
        text = "Duration: {!Progress_Note__c.Total_Time__c}";
        context.fillText(text, 2, line );
        line += fontsize;
        
        context.textAlign="left";
        // Edited with service value for EB-495
        text = "Service Code: {!Progress_Note__c.Service_Code__r.Service_Value__c}";
        context.fillText(text, 2, line );
        line += fontsize;       
        
        //context.font = "12px sans-serif"; Service_Assignment__r.Service_Line__c
        text = "Service Location: {!Progress_Note__c.Service_Location__c}";
        context.textAlign="left";
        context.fillText( text, 1 , line, width );
        line += fontsize;

        
        context.moveTo(0, line);
        context.lineTo(width, line);
        context.stroke();
        line += 22;



//start PP SK here
    var myleft = 5;
    var myright = 385;
        
        addcheckbox2("Individual Session",line,width,{!Progress_Note__c.Individual_Session__c},myleft);
        addcheckbox2("Fam. Session",line,width,{!Progress_Note__c.Fam_Session__c}, myright);
        line += fontsize;                 
        
        addcheckbox2("Psychoeducation",line,width,{!Progress_Note__c.Psychoeducation__c},myleft);
        addcheckbox2("Therapeutic Mentoring",line,width,{!Progress_Note__c.Therapeutic_Mentoring__c}, myright);
        line += fontsize; 
        
        
        addcheckbox2("Behavior & Anger Mgt. Techniques",line,width,{!Progress_Note__c.Behavior_Anger_Mgt_Techniques__c},myleft);
        addcheckbox2("Developing & Implementing Home Based Support Plan",line,width,{!Progress_Note__c.Dev_Impl_Home_Based_Support_Plan__c}, myright);
        line += fontsize; 
        
               
        addcheckbox2("Crisis Management",line,width,{!Progress_Note__c.Crisis_Management__c},myleft);
        addcheckbox2("Assessing",line,width,{!Progress_Note__c.Assessing__c}, myright);
        line += fontsize;                     
                            
        addcheckbox2("Linking",line,width,{!Progress_Note__c.Linking__c},myleft);
        addcheckbox2("Coordinating",line,width,{!Progress_Note__c.Coordinating__c}, myright);
        line += fontsize;     
                            
        addcheckbox2("Monitoring",line,width,{!Progress_Note__c.Monitoring__c},myleft);
        addcheckbox2("Planning",line,width,{!Progress_Note__c.Planning__c}, myright);
        line += fontsize;                                                                       
        line += fontsize;
        
                            
        addcheckbox2("Billable",line,width,{!Progress_Note__c.Purpose_Service_is_Billable__c},myleft);
        addcheckbox2("Non Billable",line,width,{!Progress_Note__c.Non_Payable_Outcome__c}, 200);
        line += fontsize;
                                              
                      
        
        addcheckbox2("Direct",line,width,{!mydirect},myleft);
        addcheckbox2("Indirect",line,width,{!myindirect}, 200);  
        line += fontsize;
        line += fontsize;




if({!Progress_Note__c.Non_Payable_Outcome__c}){
    context.font = "bold 12px sans-serif";
    context.textAlign="left";
    text="Non Payable Outcome: "; 
    context.fillText(text, 5 , line, width );
    
    line += fontsize;
    context.font = "12px sans-serif";
    myleft=20;
    
    
    line += addcheckbox2("No Show",line,width,{!Progress_Note__c.No_Show__c},myleft ,{!Progress_Note__c.No_Show__c});

    line += addcheckbox2("Family Life Cycle",line,width,{!Progress_Note__c.Family_Life_Cycle__c},myleft ,{!Progress_Note__c.Family_Life_Cycle__c});

    line += addcheckbox2("Family Assessment Evaluation",line,width,{!Progress_Note__c.Family_Assessment_Evaluation__c},myleft ,{!Progress_Note__c.Family_Assessment_Evaluation__c});

    line += addcheckbox2("Structured Family Assessment",line,width,{!Progress_Note__c.Structured_Family_Assessment__c},myleft ,{!Progress_Note__c.Structured_Family_Assessment__c});
    
    line += addcheckbox2("Generalization",line,width,{!Progress_Note__c.Generalization__c},myleft ,{!Progress_Note__c.Generalization__c});   
    
    line += addcheckbox2("Co-Therapist (unable to bill)",line,width,{!Progress_Note__c.Co_Therapist_unable_to_bill__c},myleft ,{!Progress_Note__c.Co_Therapist_unable_to_bill__c});    
    
    line += addcheckbox2("Field Support",line,width,{!Progress_Note__c.Field_Support__c},myleft ,{!Progress_Note__c.Field_Support__c}); 
    
    line += addcheckbox2("FCT Fidelity Measure",line,width, {!Progress_Note__c.FCT_Fidelity_Measure__c},myleft ,{!Progress_Note__c.FCT_Fidelity_Measure__c});          

    line += addcheckbox2("FCT Check Off",line,width, {!Progress_Note__c.FCT_Check_Off__c} ,myleft , {!Progress_Note__c.FCT_Check_Off__c} ); 
    
    line += addcheckbox2("Called Client/Family, phone disconnected",line,width, {!Progress_Note__c.Called_Client_Family_phone_disconnected__c} ,myleft , {!Progress_Note__c.Called_Client_Family_phone_disconnected__c} );   
    
    line += addcheckbox2("Client/Family not home left note on door",line,width, {!Progress_Note__c.Client_Family_not_home_left_note_on_door__c} ,myleft , {!Progress_Note__c.Client_Family_not_home_left_note_on_door__c} );

    line += addcheckbox2("Client/Family home but refusing service",line,width, {!Progress_Note__c.Client_Family_home_but_refusing_service__c} ,myleft , {!Progress_Note__c.Client_Family_home_but_refusing_service__c} ); 
               
    line += addcheckbox2("Client placed in detention",line,width,{!Progress_Note__c.Client_placed_in_detention__c} ,myleft , {!Progress_Note__c.Client_placed_in_detention__c} ); 
               
    line += addcheckbox2("Client placed in hospital",line,width, {!Progress_Note__c.Client_placed_in_hospital__c} ,myleft , {!Progress_Note__c.Client_placed_in_hospital__c} );

    line += addcheckbox2("Client placed in group home",line,width, {!Progress_Note__c.Client_placed_in_group_home__c} ,myleft ,  {!Progress_Note__c.Client_placed_in_group_home__c} ); 
    
    line += addcheckbox2("Client placed in Substance Abuse program",line,width, {!Progress_Note__c.Client_placed_in_Substance_Abuse_program__c} ,myleft ,  {!Progress_Note__c.Client_placed_in_Substance_Abuse_program__c});  

    line += addcheckbox2("Child and Family Team Meeting",line,width, {!Progress_Note__c.Child_and_Family_Team_Meeting__c} ,myleft , {!Progress_Note__c.Child_and_Family_Team_Meeting__c});

    line += addcheckbox2("Called Client/Family, left voice message",line,width, {!Progress_Note__c.Called_Client_Family_left_voice_message__c} ,myleft , {!Progress_Note__c.Called_Client_Family_left_voice_message__c});  

    line += addcheckbox2("Called collateral, left voice message",line,width, {!Progress_Note__c.Called_collateral_left_voice_message__c} ,myleft , {!Progress_Note__c.Called_collateral_left_voice_message__c});
                 
}


        
        line += fontsize;
        context.font = "bold 14px sans-serif";
        text = "Area of Family Functioning: "
        
        context.textAlign="left";
        context.fillText( text, 1 , line, width );
        context.font = "12px sans-serif";
        text = "{!Progress_Note__c.Area_Family_Functioning__c}";
        context.fillText( text, 205 , line, width );
        
        line += fontsize;

// end PP SK here 



/*
        context.font = "12px sans-serif";       
        newdate = new Date( '{!Progress_Note__c.Start_Time__c}');
        context.textAlign = "left";
        text = "Date: " + newdate.toString("MM/dd/yyyy hh:mm:ss a z")  ;
        context.fillText(text, col1indent, line);
        
        text = "Duration: {!Progress_Note__c.Total_Time__c}";
        context.fillText(text, col2 + ((col3-col2)/2) , line);
        
        context.font = "14px sans-serif";
        fontsize = 14;
        line += fontsize*2;
        text = "Goals Addressed" ;
        metrics = context.measureText(text);
        context.fillText(text, 2, line );
        
        context.font = "italic 14px sans-serif";
        text = " (Enter exact words from PCP):" ;
        context.fillText(text, metrics.width + 2, line);
        line += fontsize;
*/

        

<apex:repeat value="{!apg}" var="g">
        context.font = "bold 14px sans-serif";
        line += fontsize*2;    
        text = "Goal Description";
        context.fillText( text, 2, line );
        
        line += fontsize * 2;
        context.font = "12px sans-serif";
        numlines = wrapText(context, "{!JSENCODE(g.Description__c)}", col1indent, line, col3, fontsize );
        line = numlines;
                    
    <apex:repeat value="{!g.Action_plan_objectives__r}" var="o">
            line += fontsize * 2 ;
            context.font = "bold italic 14px sans-serif";
            text = "Plan Objective";
            metrics = context.measureText(text);
            context.fillText(text, col1indent2, line += (fontsize));
            line += fontsize;
                context.font = "12px sans-serif";
                
                text = "{!JSENCODE(o.Description__c)}";
                line = wrapText(context, text, col1indent2, line, col3, fontsize);
                line += fontsize;    
                
    
    </apex:repeat>
</apex:repeat>        

        line += 22;
        context.moveTo(0, line);
        context.lineTo(width, line);
        context.stroke();
        line += 22; 

        context.font = "bold 14px sans-serif";
        text = "Purpose of Contact: ";
        metrics = context.measureText(text);
        context.fillText(text, 2, line);
        fontsize = 14;
        line += fontsize;

        context.font = "12px sans-serif";
        text = "{!JSENCODE(Progress_Note__c.Purpose_of_Contact__c)}";
        line = wrapText(context, text, col1, line, width- col1, fontsize);
        line += fontsize*2;

        context.font = "bold 14px sans-serif";
        text = "Description of Intervention/Activity ";
        metrics = context.measureText(text);
        context.fillText(text, 2, line);
        fontsize = 14;
        line += fontsize;

        context.font = "12px sans-serif";
        text = "{!JSENCODE(Progress_Note__c.Interventions__c)}";
        line = wrapText(context, text, col1, line, width- col1, fontsize);
        line += fontsize*2;

        context.font = "bold 14px sans-serif";
        text = "Effectiveness of the Intervention/Activity per Client/Activity:";
        metrics = context.measureText(text);
        context.fillText(text, 2, line);
        line += fontsize;

        context.font = "12px sans-serif";
        text = "{!JSENCODE(Progress_Note__c.Progress__c)}";
        line = wrapText(context, text, col1, line, width- col1, fontsize);
        line += fontsize;

        context.font = "12px sans-serif";
        text = "{!JSENCODE(Progress_Note__c.Notes_For_Next_Visit__c)}";
        line = wrapText(context, text, col1, line, width- col1, fontsize);
        line += fontsize;
        
        

        line += 22;
        context.moveTo(0, line);
        context.lineTo(width, line);
        context.stroke();
        line += 22;
       
          context.font = "10px sans-serif";
        var date = new Date();
        
        var i= 0;
        
        for (i = 0 ; i< numsigs; i++ ) {
            line += 100;
            text = "Signature:________________________________________________________________________________ " + date.toString();
            elesign[i] = line;
            if ( i == 0 )
                minsign = line;
                
            context.fillText(text, 10,line);
        }
        minsign = elesign[0];
        maxsign = elesign[i-1];
        
        line += 50;      
        
        context.font = "12px underline sans-serif";
        fontsize = 12;
        text="***For professionals, signature and credentials, degree or licensure required." 
        context.fillText( text, 10, line);
        line += fontsize;
        text="***For paraprofessions, signature and position required.***";
        context.fillText( text, 10, line);
        
        line += 50;
        
        context.font="10px sans-serif";
        context.textAlign="center";
        fontsize=10;
        context.fillStyle = "rgb(128,128,128)";
        text = "Created By: {!JSENCODE(Progress_Note__c.CreatedBy.Name)} {!JSENCODE(Progress_Note__c.CreatedBy.Title)}"
        context.fillText( text, width/2, line );
        line += fontsize;

        var isnotelate = "{!Progress_Note__c.Is_Note_Late__c}";
        var lateentry = " "; 
        if (isnotelate ==  "Yes")
            lateentry = " - LATE ENTRY";
        
        newdate = new Date( '{!Progress_Note__c.CreatedDate}');
        text = "Created Date: " + newdate.toString('MM/dd/yyyy hh:mm:ss a z') + lateentry;
        context.fillText( text, width/2, line );
        line += fontsize;
        text = "Latest Release of Form: 12/17/2013";
        context.fillText( text, width/2, line );
        line += 25;
        
        context.textAlign="left";
        context.fillStyle = "rgb(0,0,0)";
        return( line );
        
     }   
     
    
</script>
</apex:page>