public with sharing class HomePageController{
	SystemSettings__c OS = SystemSettings__c.getOrgDefaults();

	public final String OperatingGroup = [select operating_group__c from user where id=:UserInfo.getUserId() limit 1].operating_group__c;
	public static Map<String,Schema.SObjectType> gSchema;
	public Map<String,String> sObjNamesMap{get;set;}
	public List<String> objname{get;set;}
	public List<wrapper> AppWrapper = new List<wrapper>();
	public String viewstsk{get;set;}
	public String FrstName{get;set;}
	public String LstName{get;set;}
	public String objectName{get;set;}

	private static Set<String> sObjNamesSet;
	//declaration of variables
	public List<Report> refrportlst{get;set;}
	public List<Report> PBSrportlst{get;set;}
	public List<Report> contractrportlst{get;set;}
	public List<Report> credrportlst{get;set;}
	public List<Report> docrportlst{get;set;}
	public List<Task> populateTasks{get;set;}
	public Map<Id, String> taskToNameMap { get; set; }
	public List<VF_Reports__c> VFReportlst{get;set;}

	public boolean RefCreate{get;set;}
	public boolean RefView{get;set;}
	public boolean PBSView{get;set;}
	public boolean PBSCreate{get;set;}
	public boolean TMNCreate{get;set;}
	public boolean TMNView{get;set;}
	public boolean ContractCreate{get;set;}
	public boolean ContractView{get;set;}
	public boolean DocCreate{get;set;}
	public boolean DocView{get;set;}
	public boolean Refresh=false;

	public boolean showNeuroFeatures{
		get {
			if (showNeuroFeatures == null) {
				showNeuroFeatures = OS.Referral_Neuro_Features_Enabled__c;
			}
			return showNeuroFeatures;
		}
		set;
	}

	// NEVAL-56
	public String sortColumn { get; set; }
	public String sortOrder { get; set; }

	//report folders
	public String RefId;
	public String ESDbillingId;
	public String ESDActivityId;
	public String ESDSupyId;
	public String CntrctId;
	public String CredId;
	public String TypObj;

	public Id selectedProgram { get; set; }
	public List<SelectOption> programslist { get; set; }
	public Service_Assignment__c[] serviceAssignments { get; set; }

	// We use this variable to keep track of which service assignment we want
	// to run an action on
	public Id serviceAssignmentIdForAction { get; set; }

	// Given the id of a service assignment, here's a map of the actions
	// (excluding Create New Shift Doc) for the latest shift doc of that service
	// asignment (providing that the shift doc is active)
	public Map<Id, List<SelectOption>> serviceAssignmentToSelectOptionMap { get; set; }
	// List of repeatable section/subsection/subsubsection for CM Shift Doc
	public Set<String> cmShiftDocRepeatable;

	// Whether to show people with inactive service assignments
	public Boolean pbsOnlyShowActiveServiceAssignment { get; set; }

	public transient List<HomePageSearchController.SearchResult> searchResultList { get; set; }
	public Id searchResultPBS { get; set; }
	public Id highlightedServiceAssignmentId { get; set; }

	//Constructor
	public HomePageController(){
		pbsOnlyShowActiveServiceAssignment = true;
		searchResultList = new List<HomePageSearchController.SearchResult>();
		programsList = new list<SelectOption>();
		serviceAssignmentToSelectOptionMap = new Map<Id, List<SelectOption>>();
		List<AggregateResult> slPrgms = [
			SELECT service_location__r.id slID, service_location__r.Alias__c alias, service_location__r.program__c prgm
			  FROM service_assignment__c
			GROUP BY service_location__r.id, service_location__r.program__c, service_location__r.Alias__c
			HAVING COUNT(service_location__r.id) > 0
			ORDER BY service_location__r.program__c
		];
		for (AggregateResult slPrgm : slPrgms) {
			programslist.add(new SelectOption((Id)slPrgm.get('slID'), String.valueOf(slPrgm.get('alias')) + '-' + String.valueOf(slPrgm.get('prgm')) ));
		}
		Cookie initialProgramCookie = ApexPages.currentPage().getCookies().get('homePageInitialProgram');
		if (initialProgramCookie == null) {
			selectedProgram = programslist[0].getValue();
		} else {
			selectedProgram = initialProgramCookie.getValue();
		}
		// get list of repeatables
		List<AggregateResult> evalRepeats = [
			SELECT category__c, sub_category__c, sub_sub_category__c
			  FROM eval__c
			 WHERE eval_type__r.name = 'Head To Toe'
			   AND eval_type__r.Category__c = 'Care Meridian'
			   AND eval__c.field_name__c = 'isRepeatable'
			   AND eval__c.visible__c = false
			GROUP BY cat_seq_text__c, subcat_seq_text__c, subsubcat_seq_text__c, category__c, sub_category__c, sub_sub_category__c
			ORDER BY cat_seq_text__c, subcat_seq_text__c, subsubcat_seq_text__c
		];
		cmShiftDocRepeatable = new set<String>();
		for (AggregateResult ag : evalRepeats){
			cmShiftDocRepeatable.add((string)ag.get('category__c') + '~' +  (string)ag.get('sub_category__c') + '~' + ( String.isBlank((string)ag.get('sub_sub_category__c')) ? '' : (string)ag.get('sub_sub_category__c')));
		}
		updateProgramSelection();
		checkTmnUserRecord();
		shareobj();
		mineTasks();
	}

	public void updateProgramSelection() {
		String query = '' +
			'SELECT Id, Person_Being_Served__r.Id, Person_Being_Served__r.Name, ' +
			'       Admission__r.Id, ' +
			'       (SELECT Id FROM Action_Plans__r ORDER BY CreatedDate DESC), ' +
			'       (SELECT Id, Name, Status__c FROM Evaluations__r WHERE RecordType.Name = \'CMShiftAssessment\' ORDER BY CreatedDate DESC LIMIT 1) ' +
			'FROM Service_Assignment__c ' +
			'WHERE Service_Location__c = :selectedProgram ' +
			(pbsOnlyShowActiveServiceAssignment ? 'AND Status__c=\'Active\'': '') +
			'ORDER BY Person_Being_Served__r.Name';
		serviceAssignments = Database.query(query);
		Map<Id, Id> evaluationToServiceAssignmentMap = new Map<Id, Id>();
		for (Service_Assignment__c serviceAssignment: serviceAssignments) {
			if (serviceAssignment.Evaluations__r.size() > 0 && serviceAssignment.Evaluations__r[0].Status__c == 'Draft') {
				evaluationToServiceAssignmentMap.put(serviceAssignment.Evaluations__r[0].Id, serviceAssignment.Id);
			}
			serviceAssignmentToSelectOptionMap.put(serviceAssignment.Id, new List<SelectOption>());
		}
		List<AggregateResult> responses = [
			SELECT What_Id__c, Eval__r.Category__c cat, Eval__r.Sub_Category__c subCat,
			       Eval__r.Sub_Sub_Category__c subSubCat
			  FROM Eval_Value__c
			 WHERE What_Id__c IN :evaluationToServiceAssignmentMap.keySet()
			   AND Eval_Section_Type__c != 'Activity Log'
			GROUP BY Eval__r.cat_seq_text__c, Eval__r.subcat_seq_text__c,
			         Eval__r.subsubcat_seq_text__c, Eval__r.category__c,
			         Eval__r.sub_category__c, Eval__r.Sub_Sub_Category__c,
			         What_Id__c
			ORDER BY Eval__r.cat_seq_text__c, Eval__r.subcat_seq_text__c,
			         Eval__r.subsubcat_seq_text__c
		];
		for (AggregateResult response: responses) {
			String compositeKey = response.get('cat') + '~' + response.get('subCat') + '~' + (String.isBlank((string) response.get('subSubCat')) ? '' : (string) response.get('subSubCat'));
			if (!cmShiftDocRepeatable.contains(compositeKey)) {  // Only add Activity Log Entry for repeatable sections/subsections/subsubsections
				continue;
			}
			serviceAssignmentToSelectOptionMap.get(evaluationToServiceAssignmentMap.get((Id) response.get('What_Id__c'))).add(
				new SelectOption('shiftDocAction-' + compositeKey,
					'Add Activity Log Entry for ' + response.get('cat') + '/' + response.get('subCat') + (String.isBlank((string) response.get('subSubCat')) ? '' : '/ ' + (string) response.get('subSubCat'))
				)
			);
		}
		highlightedServiceAssignmentId = null;
		ApexPages.currentPage().setCookies(new Cookie[]{ new Cookie('homePageInitialProgram', selectedProgram, null, 30*24*60*60, false) }); //  set the cookie max age to a month
	}

	public String getOperatingGroup() {
		return operatingGroup;
	}

	public void getReportList() {
		reports();
	}

	//Wrapper class for Approvals
	public List<wrapper> getListApprovals(){
		if(Refresh==false){
			gSchema = Schema.getGlobalDescribe();
			sObjNamesMap = new Map<String,String>{};
			sObjNamesSet = gSchema.keyset();
			for(String sobj:sObjNamesSet){
				Schema.DescribeSObjectResult oSchema = gSchema.get(sobj).getDescribe();
				String tempName = oSchema.getLabel();
				String tempPrefix = oSchema.getKeyPrefix();
				sObjNamesMap.put(tempPrefix, tempName);
			}

			for(ProcessInstanceWorkitem app:[select Id,ProcessInstanceId,CreatedDate,ActorId,CreatedById,CreatedBy.Name,ProcessInstance.LastModifiedBy.Name,ProcessInstance.TargetObject.Name,ProcessInstance.LastModifiedById,ProcessInstance.TargetObjectId from ProcessInstanceWorkitem where ActorId=:UserInfo.getUserId() order by CreatedDate desc limit 1000]){
				String sub = app.ProcessInstance.TargetObjectId;
				String IdType = sub.substring(0,3);
				String Type = sObjNamesMap.get(IdType);

				AppWrapper.add(new wrapper(app.Id,app.ProcessInstance.TargetObjectId,app.ProcessInstance.LastModifiedById,app.ProcessInstance.LastModifiedBy.Name,app.CreatedDate,app.ProcessInstance.TargetObject.Name,Type));
			}
			Refresh = true;
		}
		return AppWrapper;
	}

	//Block visibility check
	public void shareobj(){
		Schema.DescribeSObjectResult oSchema4;

		//Referral object
		Schema.DescribeSObjectResult oSchema1 = Referral__c.sObjectType.getDescribe();
		RefCreate = oSchema1.IsCreateable();
		RefView = oSchema1.isAccessible();
		//PBS object
		Schema.DescribeSObjectResult oSchema2 = Account.sObjectType.getDescribe();
		PBSCreate = oSchema2.IsCreateable();
		PBSView = oSchema2.isAccessible();
		//TMN object
		Schema.DescribeSObjectResult oSchema3 = TMN_Contact__c.sObjectType.getDescribe();
		TMNCreate = oSchema3.IsCreateable();
		TMNView = oSchema3.isAccessible();
		//Contract object
		List<TMN_User__c> tmnUsers = [SELECT ID, Operating_Group__c FROM TMN_User__c WHERE Salesforce_User_Account__c= :UserInfo.getUserId() LIMIT 1];

		for(TMN_User__c tmn:tmnUsers){
			if(tmn.Operating_Group__c=='Cambridge'){
				oSchema4 = TMN_Contract__c.sObjectType.getDescribe();
			}else if(tmn.Operating_Group__c=='CareMeridian' || tmn.Operating_Group__c=='Care Meridian' || tmn.Operating_Group__c=='NeuroRestorative' ){
				oSchema4 = CareMeridian_Contract__c.sObjectType.getDescribe();
			}else if(tmn.Operating_Group__c=='Redwood'){
				oSchema4 = Redwood_Contract__c.sObjectType.getDescribe();
			}else{
				oSchema4=null;
			}
		}

		if(oSchema4!=null){
			ContractCreate = oSchema4.IsCreateable();
			ContractView = oSchema4.isAccessible();
		}else{
			ContractCreate = false;
			ContractView = false;
		}

		//Doc object
		Schema.DescribeSObjectResult oSchema5 = Document__c.sObjectType.getDescribe();
		DocCreate = oSchema5.IsCreateable();
		DocView = oSchema5.isAccessible();
	}

	//Wrapper class
	public class wrapper{
		public Id TAction{get;set;}
		public Id TRelated{get;set;}
		public String TobjName{get;set;}
		public String TType{get;set;}
		public Id MostRecent{get;set;}
		public String LMName{get;set;}
		public Datetime cDate{get;set;}

		public wrapper(Id Id,Id TId,Id LId,String LName,Datetime cdate,String TName,String Type){
			this.Taction = Id;
			this.TRelated = TId;
			this.TobjName = TName;
			this.MostRecent = LId;
			this.LMName = LName;
			this.cDate = cdate;
			this.TType = Type;
		}
	}

	public string referralPrefix {
		get {
			Schema.DescribeSObjectResult d = Referral__c.sObjectType.getDescribe();

			return d.getKeyPrefix();
		}
		private set;
	}

	public Map<String, String> personsBeingServedViews {
		get {
			if (personsBeingServedViews != null) {
				return personsBeingServedViews;
			}
			personsBeingServedViews = new Map<String, String>();
			String query = 'SELECT ID FROM Account limit 100';  // 05/06/14 - set limit to prevent governor limit overrun
			ApexPages.StandardSetController con = new ApexPages.StandardSetController(Database.getQueryLocator(query));
			SelectOption[] options = con.getListViewOptions();
			for (SelectOption option : options) {

				if (option.getLabel().toLowerCase().indexOf('all persons being served')!=-1) {
					personsBeingServedViews.put('all', option.getValue());
				} else if (option.getLabel().toLowerCase().indexOf('recently viewed')!=-1) {
					personsBeingServedViews.put('recent', option.getValue());
				} else if (option.getLabel().toLowerCase().indexOf('new this week')!=-1) {
					personsBeingServedViews.put('new', option.getValue());
				} else if (option.getLabel().toLowerCase().indexOf('my persons being served')!=-1) {
					personsBeingServedViews.put('my', option.getValue());
				}
			}

			return personsBeingServedViews;
		}
		set;
	}

	public Map<String, String> ReferralViews {
		get {
			if (ReferralViews != null) {
				return ReferralViews;
			}
			ReferralViews = new Map<String, String>();
			String query2 = 'SELECT ID FROM Referral__c  limit 100'; // 05/06/14 - set limit to prevent governor limit overrun
			ApexPages.StandardSetController con2 = new ApexPages.StandardSetController(Database.getQueryLocator(query2));
			SelectOption[] options2 = con2.getListViewOptions();
			for (SelectOption option2 : options2) {

				if (option2.getLabel().toLowerCase().indexOf('all')!=-1) {
					ReferralViews.put('all', option2.getValue().substring(0,15));
				} else if (option2.getLabel().toLowerCase().indexOf('my referrals')!=-1) {
					ReferralViews.put('my', option2.getValue().substring(0,15));
				}
			}

			return ReferralViews;
		}
		set;
	}
	public Map<String, String> DocViews {
		get {
			if (DocViews != null) {
				return DocViews;
			}
			DocViews = new Map<String, String>();
			String query1 = 'SELECT ID FROM Document__c  limit 100'; // 05/06/14 - set limit to prevent governor limit overrun
			ApexPages.StandardSetController con1 = new ApexPages.StandardSetController(Database.getQueryLocator(query1));

			SelectOption[] options1 = con1.getListViewOptions();

			for (SelectOption option1 : options1) {
				if (option1.getLabel().toLowerCase().indexOf('all')!=-1) {
					DocViews.put('all', option1.getValue().substring(0,15));
				} else if (option1.getLabel().toLowerCase().indexOf('Cambridge BP DocView')!=-1) {
					DocViews.put('cambridge', option1.getValue().substring(0,15));
				}
			}
			return DocViews;
		}
		set;
	}

	public Map<String, String> TMNViews {
		get {
			if (TMNViews != null) {
				return TMNViews;
			}
			TMNViews = new Map<String, String>();
			String query4 = 'SELECT ID FROM TMN_Contact__c  limit 100'; // 05/06/14 - set limit to prevent governor limit overrun
			ApexPages.StandardSetController con4 = new ApexPages.StandardSetController(Database.getQueryLocator(query4));

			SelectOption[] options4 = con4.getListViewOptions();

			for (SelectOption option4 : options4) {
				if (option4.getLabel().toLowerCase().indexOf('my')!=-1) {
					TMNViews.put('my', option4.getValue().substring(0,15));
				}
			}
			return TMNViews;
		}
		set;
	}

	public List<Report> reports() {
		String ESDAct='',ref,Care,ESDbill,ESDsup,Red;
		VF_Reports__c vf = VF_Reports__c.getInstance();
		VFReportlst = [SELECT Name,Id,Name__c,Description__c,link__c, groups__c from VF_Reports__c];
		for(Folder tmp:[SELECT AccessType,Id,IsReadonly,Name,DeveloperName,Type FROM Folder WHERE Type = 'Report']){

			if(tmp.DeveloperName=='Referrals'){
				RefId = tmp.Id;

			}else if(tmp.DeveloperName=='CareMeridian_Contracts' && operatinggroup == 'Care Meridian'){
				CntrctId = tmp.Id;
			}
			else if(tmp.DeveloperName=='Redwood_Contracts' && operatinggroup == 'Redwood'){
				CntrctId = tmp.Id;
			}
			else if ( tmp.DeveloperName == 'Contract_Reports' && operatinggroup == 'Cambridge')
				CntrctId = tmp.Id;
			else if ( tmp.DeveloperName == 'Redwood_Contracts' && operatinggroup == 'Redwood')
				CntrctId = tmp.Id;
			else if(tmp.DeveloperName=='ESD_Activity'){
				ESDActivityId = tmp.Id;
				ESDAct = 'ESDAct';
			}
			else if(tmp.DeveloperName=='ESD_Billing'){
				ESDbillingId = tmp.Id;
			}
			else if(tmp.DeveloperName=='ESD_Supervisory'){
				ESDSupyId = tmp.Id;
			}
			else if ( tmp.DeveloperName == 'Credentialing')
				CredID = tmp.Id;
		}

		refrportlst = new List<Report>();
		system.debug('op grounp ' + OperatingGroup  );
		if(OperatingGroup != null){
			set<string> okRefRpts = getReportsToShow(OperatingGroup );
			system.debug('reports in scope - ' + okRefRpts);

			for(Report rpt: filterReportAccess(report(RefId, null))) {
				if (okRefRpts.contains(rpt.DeveloperName)) {
					refrportlst.add(rpt);
				}
			}
		}

		contractrportlst = new List<Report>();
		for(Report rpt: filterReportAccess(report(CntrctId, null))) {
			contractrportlst.add(rpt);
		}

		credrportlst = new List<Report>();
		for(Report rpt: filterReportAccess(report(CredId,null))) {
			credrportlst.add(rpt);
		}

		docrportlst = new List<Report>();
		for(Report rpt: filterReportAccess(report(ESDActivityId,'Docs'))) {
			docrportlst.add(rpt);
		}

		PBSrportlst = new List<Report>();
		for(Report rpt: filterReportAccess(report(ESDActivityId,ESDAct))) {
			PBSrportlst.add(rpt);
		}

		for(Report rpt1: filterReportAccess(report(ESDbillingId,ESDbill))) {
			PBSrportlst.add(rpt1);
		}

		for(Report rpt2: filterReportAccess(report(ESDSupyId,ESDsup))) {
			PBSrportlst.add(rpt2);
		}

		return null;
	}
	// Given a list of reports, return a list of reports that the context user
	// has access to
	public List<Report> filterReportAccess(List<Report> reports) {
		System.debug('reports that need filter:' + reports);
		Map<Id, Report> reportMaps = new Map<Id, Report>();
		for (Report report: reports) {
			reportMaps.put(report.Id, report);
		}
		Map<Id, UserRecordAccess> accessMap = new Map<Id, UserRecordAccess>([
			SELECT RecordId, HasReadAccess
			  FROM UserRecordAccess
			 WHERE UserId = :UserInfo.getUserId()
			   AND RecordId IN :reportMaps.keySet()
		]);
		List<Report> accessibleReports = new List<Report>();
		for (Report report: reports) {
			if (accessMap.get(report.Id).HasReadAccess) {
				accessibleReports.add(reportMaps.get(report.Id));
			}
		}
		return accessibleReports;
	}

	public List<Report> report(Id ownId,String ReportText){
		String query = 'SELECT Name, Id,OwnerId, description, DeveloperName, SystemModstamp FROM report where OwnerId=:ownId';
		if(ReportText!=null && ReportText=='ESDAct'){
			query+=' and description like \'%#notes%\'' ;
		} else if (ReportText != null && ReportText=='Docs') {
			query+=' and (description like \'%Case Document%\' or description like \'%Fidelity Document%\')';
		}

		query+= ' order by name';

		List<Report> tempreport = database.query(query);
		return tempreport;
	}


	public List<SelectOption> getviewvalues() {
		List<SelectOption> Options = new List<SelectOption>();
		Options.add(new SelectOption('All Open','All Open'));
		Options.add(new SelectOption('Overdue','Overdue'));
		Options.add(new SelectOption('Today','Today'));
		Options.add(new SelectOption('Today+Overdue','Today+Overdue'));
		Options.add(new SelectOption('Tomorrow','Tomorrow'));
		Options.add(new SelectOption('Next 7 Days','Next 7 Days'));
		Options.add(new SelectOption('Next 7 Days+Overdue','Next 7 Days+Overdue'));
		Options.add(new SelectOption('This Month','This Month'));

		return Options;
	}
	public void mineTasks(){
		system.debug('came here');
		Id userId = UserInfo.getUserId();
		String query ='select id, subject,WhatId,What.Name,WhoId,Who.Name,status,RecordTypeId, ActivityDate, Priority, CreatedDate from Task where OwnerId=:userId and status!=\'Completed\'';
		system.debug('*********viewstsk'+viewstsk);
		String orderStatement = '';
		// NEVAL-56
		Map<String, String> colNumToFieldMap = new Map<String, String>{
			'0' => '',
			'1' => 'CreatedDate',
			'2' => 'Subject',
			'3' => 'Priority',
			'4' => 'Status',
			'5' => 'ActivityDate',
			'6' => 'Id',
			'7' => 'What.Name'
		};
		if (sortColumn != '' && sortColumn != null && sortOrder != '' && sortOrder != null) {
			orderStatement = ' order by ' + colNumToFieldMap.get(sortColumn) + ' ' + sortOrder;
			if (sortOrder.toLowerCase() == 'asc') {  // Make sure null values are sorted differently for different sort order (by default, it's nulls first)
				orderStatement += ' nulls last';
			}
		} else {
			orderStatement = ' order by ActivityDate desc, Priority';
		}
		System.debug('Order statement: ' + orderStatement);
		if(viewstsk==null || viewstsk=='All Open'){
			query+= orderStatement + ' limit 25';
		}
		else if (viewstsk=='Overdue'){
			query+='and ActivityDate<TODAY' + orderStatement + ' limit 25';
		}else if (viewstsk=='Today'){
			query+='and ActivityDate=TODAY' + orderStatement + ' limit 25';
		}else if (viewstsk=='Today+Overdue'){
			query+='and ActivityDate<=TODAY' + orderStatement + ' limit 25';
		}else if (viewstsk=='Tomorrow'){
			query+='and ActivityDate=TOMORROW' + orderStatement + ' limit 25';
		}else if (viewstsk=='Next 7 Days'){
			query+='and ActivityDate=NEXT_WEEK' + orderStatement + ' limit 25';
		}else if (viewstsk=='Next 7 Days+Overdue'){
			query+='and ActivityDate<=NEXT_WEEK' + orderStatement + ' limit 25';
		}else if (viewstsk=='This Month'){
			query+='and ActivityDate=THIS_MONTH' + orderStatement + ' limit 25';
		}else {
			query+= orderStatement + ' limit 25';
		}

		populateTasks = database.query(query);

		// We use the following map to display the name of tasks, because tasks
		// associated with Referrals cannot have their WhoId set to the Person
		// Being Referred record, so we need to construct the names manually
		// here
		taskToNameMap = new Map<Id, String>();
		Set<Id> whatIdSet = new Set<Id>();
		for (Task task: populateTasks) {
			if (task.WhoId != null) {
				taskToNameMap.put(task.Id, '<a href="/' + task.WhoId + '">' + task.Who.Name + '</a>');
			} else {
				whatIdSet.add(task.WhatId);
			}
		}
		Map<Id, Referral__c> referrals = new Map<Id, Referral__c>([
			SELECT Id, Person_Being_Referred__r.Full_Name__c
			FROM Referral__c
			WHERE Id IN :whatIdSet
		]);
		Set<Id> referralIdSet = referrals.keySet();
		for (Task task: populateTasks) {
			if (referralIdSet.contains(task.WhatId)) {
				taskToNameMap.put(task.Id, '<a href="/' + task.WhatId + '">' + referrals.get(task.WhatId).Person_Being_Referred__r.Full_Name__c + '</a>');
			} else if (task.WhoId == null) {  // Do not override the entry from above if WhoId != null
				taskToNameMap.put(task.Id, '');
			}
		}
	}

	public PageReference getsearchNames() {
		try {
			if ((FrstName!=null && FrstName!='') || (LstName!=null && LstName!='')){
				system.debug('coming here');
				PageReference newocp= new PageReference('/apex/HomePage_Search?FirstNM='+FrstName+'&&LastNM='+LstName);
				newocp.setRedirect(true);
				return newocp;
			}
			return null;
		} catch (DMLException e) {
			ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,
				'Error opening the Search Results.')
			);
			return null;
		}
		return null;
	}

	public void getSearchResults() {
		if ((FrstName == null || FrstName == '') && (LstName ==null || LstName == '')) {
			ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,
				'You have to specify either a First Name or Last Name')
			);
			return;
		}
		HomePageSearchController searchController = new HomePageSearchController();
		searchController.firstName = FrstName;
		searchController.lastName = LstName;
		searchResultList = searchController.getSearchResults(true, true, false);
	}

	public void highlightSearchResultPBS() {
		Service_Assignment__c[] serviceAssignments = [
			SELECT Id, Person_Being_Served__r.Id, Service_Location__r.Id, Status__c
			FROM Service_Assignment__c
			WHERE Person_Being_Served__c = :searchResultPBS
			ORDER BY Person_Being_Served__r.Name
		];
		// We can only choose one row to highlight, so let's focus on ones with
		// active service assignment (if none exists then we'll highlight the
		// inactive ones)
		Service_Assignment__c highlightedSA;
		for (Service_Assignment__c serviceAssignment: serviceAssignments) {
			if (serviceAssignment.Status__c == 'Active') {
				highlightedSA = serviceAssignment;
			}
			if (highlightedSA == null && serviceAssignment.Status__c != 'Active') {
				highlightedSA = serviceAssignment;
			}
		}
		if (highlightedSA != null) {
			selectedProgram = highlightedSA.Service_Location__r.Id;
			if (pbsOnlyShowActiveServiceAssignment && highlightedSA.Status__c != 'Active') {
				pbsOnlyShowActiveServiceAssignment = false;
			}
			updateProgramSelection();
			highlightedServiceAssignmentId = highlightedSA.Id;
		} else {
			highlightedServiceAssignmentId = null;
		}
	}

	public set<string> getReportsToShow(string og){
		set<string> items = new set<string>();

		items.add('All_Active_Referrals_Report');
		items.add('All_Referrals');
		items.add('Closed_Referral_Tracking');
		items.add('Locations_Working_Ref_by_Ref_Number');
		items.add('Referral_Conversion_Time_Report');
		items.add('Referrals_By_Location_Working_Referral');
		items.add('Referrals_Requiring_Action');
		items.add('Referrals_with_Activities2');

		if(og == 'Cambridge'){
			items.add('Active_Referrals_With_Diagnosis');
			items.add('Active_Referrals_With_Diagnosis_Axis');
			items.add('Daily_Referrals');
			items.add('Red_Flagged_Referrals');
			items.add('Weekly_Referrals');
			items.add('Avatar_GA_Referrals');
			items.add('GA_Referrals_FIT_Program');

		}
		if(og == 'Redwood'){
			items.add('Active_Referrals_With_Diagnosis');
			items.add('Active_Referrals_With_Diagnosis_Axis');
			items.add('Daily_Referrals');
			items.add('Red_Flagged_Referrals');
			items.add('Weekly_Referrals');
		}
		if(og == 'Care Meridian'){
			// EC-57 - added
			items.add('Referrals_with_Funding_and_Location');
		}
		if(og == 'NeuroRestorative'){
			items.add('Daily_Referrals');
			items.add('Weekly_Referrals');
			if(showNeuroFeatures){
				items.add('NR_AdmissionSteps');
			}
		}
		return items;
	}

	// START: SHAUN-47: Additions for checking existence of TMN_User__c record for the User.
	public class TMN_User_Exception extends Exception {}

	public void checkTmnUserRecord() {
		String usersId = UserInfo.getUserId();
		List<TMN_User__c> tmnUserRecords = [ SELECT Id FROM TMN_User__c WHERE Salesforce_User_Account__c = :usersId LIMIT 1 ];

		Integer countTmnUserRecords = 0;
		for(TMN_User__c tmnu : tmnUserRecords) {
			countTmnUserRecords++;
		}

		if(countTmnUserRecords==0) {
			throw new TMN_User_Exception('ERROR: Your account must be reconfigured before you begin using the system. Please contact the Implementation Team at Implementation@thementornetwork.com or the IT Service Center at 888-774-4872.');
		}
	}
	// END: SHAUN-47: Additions for checking existence of TMN_User__c record for the User.
}